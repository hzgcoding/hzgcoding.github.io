<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Genge 随笔</title>
  
  <subtitle>好好学习 实现财富自由</subtitle>
  <link href="https://blog.genge.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.genge.cc/"/>
  <updated>2020-07-10T10:28:44.000Z</updated>
  <id>https://blog.genge.cc/</id>
  
  <author>
    <name>Genge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis Guide 使用手册</title>
    <link href="https://blog.genge.cc/2020/07/10/Redis-Guide/"/>
    <id>https://blog.genge.cc/2020/07/10/Redis-Guide/</id>
    <published>2020-07-10T10:28:44.000Z</published>
    <updated>2020-07-10T10:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-数据结构与应用"><a href="#Redis-数据结构与应用" class="headerlink" title="Redis 数据结构与应用"></a>Redis 数据结构与应用</h1><h2 id="普通字符串"><a href="#普通字符串" class="headerlink" title="普通字符串"></a>普通字符串</h2><h3 id="SET-命令"><a href="#SET-命令" class="headerlink" title="SET 命令"></a>SET 命令</h3><ol><li>SET KEY VALUE 设置</li><li>NX 不存在才设置  可用于实现分布式锁</li><li>XX 存在才设置</li></ol><h3 id="GET-命令"><a href="#GET-命令" class="headerlink" title="GET 命令"></a>GET 命令</h3><ol><li>GET KEY 返回 VALUE 值  </li><li>GETSET 返回旧 OLD_VALUE 值 , 并且设置新 NEW_VALUE</li></ol><h3 id="MSET-命令"><a href="#MSET-命令" class="headerlink" title="MSET 命令"></a>MSET 命令</h3><ol><li>MSET KEY1 VALUE1 [ KEY2 VALUE2 …] 一次设置多个键值对</li></ol><h3 id="MGET-命令"><a href="#MGET-命令" class="headerlink" title="MGET 命令"></a>MGET 命令</h3><ol><li>MGET KEY1 [ KEY2 …] 一次设置多个键值对<br>返回VALUE列表, 这在批量获取多个键值对的时候非常实用, 业务层不用做封装</li></ol><h3 id="MSETNX-命令"><a href="#MSETNX-命令" class="headerlink" title="MSETNX 命令"></a>MSETNX 命令</h3><ol><li>MSETNX KEY VALUE [ KEY2 VALUE2 …]<br>   设置多个键值对, 这是一个原子操作, 当且仅当所有KEY都不存在的时候才会成功</li></ol><h3 id="STRLEN-命令"><a href="#STRLEN-命令" class="headerlink" title="STRLEN 命令"></a>STRLEN 命令</h3><ol><li>STRLEN KEY 获取值的字节长度</li></ol><h3 id="GETRANGE-命令"><a href="#GETRANGE-命令" class="headerlink" title="GETRANGE 命令"></a>GETRANGE 命令</h3><ol><li>GETRANGE KEY start end<br>根据指定索引范围设置值，相当于取值的子串</li></ol><h3 id="SETRANGE-命令"><a href="#SETRANGE-命令" class="headerlink" title="SETRANGE 命令"></a>SETRANGE 命令</h3><ol><li>SETRANGE KEY startIndex substitute<br>根据指定开始索引，开始替换新串substitute; 当startIndex大于值长度(len - 1), redis会自动扩展值长度，并且填充空字节(\x00)</li></ol><h3 id="APPEND-命令"><a href="#APPEND-命令" class="headerlink" title="APPEND 命令"></a>APPEND 命令</h3><ol><li>APPEND KEY suffix 对值进行追加操作, 并返回新串长度<br>当KEY不存在, 那么APPEND命令等价于SET操作</li></ol><h3 id="INCRBY-DECRBY-命令"><a href="#INCRBY-DECRBY-命令" class="headerlink" title="INCRBY DECRBY 命令"></a>INCRBY DECRBY 命令</h3><ol><li>INCRBY&#x2F;DECRBY KEY incrment 当存储的值能够被解释为整数时， 可以使用这两个命令来对值进行加或减<br>当KEY不存在，那么会被初始化为0，然后再进行操作</li></ol><h3 id="INCR-DECR-命令"><a href="#INCR-DECR-命令" class="headerlink" title="INCR DECR 命令"></a>INCR DECR 命令</h3><ol><li>INCR&#x2F;DECR KEY incrment 当存储的值能够被解释为整数时， 可以使用这两个命令来对值进行加或减1<br>当KEY不存在，那么会被初始化为0，然后再进行操作</li></ol><h3 id="INCRBYFLOAT-命令"><a href="#INCRBYFLOAT-命令" class="headerlink" title="INCRBYFLOAT 命令"></a>INCRBYFLOAT 命令</h3><ol><li>INCRBYFLOAT KEY incrment， 命令与INCRBY无差别，主要是针对的是浮点数<br>但是没有DECRBYFLOAT命令，可以通过设置incrment为负数来实现减法<br>INCRBYFLOAT 命令对值的格式更加宽松，那么值是整数的时候，命令与INCRBY等同，存储的值也会是整数<br>注意Redis在处理浮点数的时候，小数位长度是有限制，最长为17位，对于大部分应用是足够的</li></ol><h2 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><table><thead><tr><th align="center">KEY</th><th align="center">FIELD</th><th align="center">VALUE</th></tr></thead><tbody><tr><td align="center">article</td><td align="center">title</td><td align="center">“Hello World”</td></tr><tr><td align="center"></td><td align="center">content</td><td align="center">“son of bitch”</td></tr><tr><td align="center"></td><td align="center">author</td><td align="center">genge</td></tr><tr><td align="center"></td><td align="center">created_at</td><td align="center">2010-10-10</td></tr></tbody></table><h3 id="HSET-命令"><a href="#HSET-命令" class="headerlink" title="HSET 命令"></a>HSET 命令</h3><ol><li>HSET HASHKEY FIELD VALUE<br>如果key或者field不存在, 那么会创建，返回值为1<br>如果field存在, 那么会更新，返回值为0</li></ol><h3 id="HSETNX-命令"><a href="#HSETNX-命令" class="headerlink" title="HSETNX 命令"></a>HSETNX 命令</h3><ol><li>HSETNX HASH FIELD VALUE<br>只在字段不存在的时候设置值，返回值为1，设置失败返回0</li></ol><h3 id="HGET-命令"><a href="#HGET-命令" class="headerlink" title="HGET 命令"></a>HGET 命令</h3><ol><li>HGET HASH FIELD VALUE<br>获取字段值</li></ol><h3 id="HINCRBY-or-HINCRFLOATBY"><a href="#HINCRBY-or-HINCRFLOATBY" class="headerlink" title="HINCRBY or HINCRFLOATBY"></a>HINCRBY or HINCRFLOATBY</h3><ol><li>HINCRBY HASH FIELD INCRMENT 对数值进行加减</li></ol><h3 id="HSTRLEN-命令"><a href="#HSTRLEN-命令" class="headerlink" title="HSTRLEN 命令"></a>HSTRLEN 命令</h3><ol><li>HSTRLEN HASH FIELD 获取字段值长度</li></ol><h3 id="HEXISTS-命令"><a href="#HEXISTS-命令" class="headerlink" title="HEXISTS 命令"></a>HEXISTS 命令</h3><ol><li>检查字段值是否存在</li></ol><h3 id="HDEL-命令"><a href="#HDEL-命令" class="headerlink" title="HDEL 命令"></a>HDEL 命令</h3><ol><li>HDEL HASH FILED 删除字段</li></ol><h3 id="HLEN-命令"><a href="#HLEN-命令" class="headerlink" title="HLEN 命令"></a>HLEN 命令</h3><ol><li>HLEN HASH 获取散列表字段个数</li></ol><h3 id="HMSET-x2F-HMGET-系列命令"><a href="#HMSET-x2F-HMGET-系列命令" class="headerlink" title="HMSET&#x2F;HMGET 系列命令"></a>HMSET&#x2F;HMGET 系列命令</h3><ol><li>效果同MSET&#x2F;MGET</li></ol><h3 id="HKEYS-x2F-HVALS-x2F-HGETALL-命令"><a href="#HKEYS-x2F-HVALS-x2F-HGETALL-命令" class="headerlink" title="HKEYS&#x2F;HVALS&#x2F;HGETALL 命令"></a>HKEYS&#x2F;HVALS&#x2F;HGETALL 命令</h3><ol><li>获取散列表中所有字段FIELD</li><li>获取散列表中所有VALUE</li><li>获取散列表中所有FIELD和VALUE<br>格式为数组： FIELD1:VALUE1:FILED2:VALUE2……</li></ol><h2 id="List列表结构"><a href="#List列表结构" class="headerlink" title="List列表结构"></a>List列表结构</h2><h3 id="Redis-List列表是一种线性的有序结构"><a href="#Redis-List列表是一种线性的有序结构" class="headerlink" title="Redis List列表是一种线性的有序结构"></a>Redis List列表是一种线性的有序结构</h3><h3 id="LPUSH-命令"><a href="#LPUSH-命令" class="headerlink" title="LPUSH 命令"></a>LPUSH 命令</h3><ol><li>LPUSH KEY VALUE0 [ VALUE1 VALUE2 …]  返回推入会列表元素个数<br>向列表左端新增n个VALUE, ‘L’ 表示是left 而不是 list</li></ol><h3 id="RPUSH-命令"><a href="#RPUSH-命令" class="headerlink" title="RPUSH 命令"></a>RPUSH 命令</h3><ol><li>RPUSH KEY VALUE0 [ VALUE1 VALUE2 …] 返回推入会列表元素个数<br>向列表右端新增n个VALUE, ‘R’ 表示是right</li></ol><h3 id="RPUSHX-x2F-LPUSHX-命令"><a href="#RPUSHX-x2F-LPUSHX-命令" class="headerlink" title="RPUSHX&#x2F;LPUSHX 命令"></a>RPUSHX&#x2F;LPUSHX 命令</h3><ol><li>与上两个命令同，但是在列表KEY不存在的时候的结果不一样，这两个命令在列表KEY不存在的时候会推入失败， 返回0</li></ol><h3 id="LPOP-x2F-RPOP"><a href="#LPOP-x2F-RPOP" class="headerlink" title="LPOP&#x2F;RPOP"></a>LPOP&#x2F;RPOP</h3><ol><li>LPOP&#x2F;RPOP LISTKEY 弹出最左边&#x2F;右边的元素， 返回POP后的元素</li></ol><h3 id="RPOPLPUSH-命令"><a href="#RPOPLPUSH-命令" class="headerlink" title="RPOPLPUSH 命令"></a>RPOPLPUSH 命令</h3><ol><li>RPOPLPUSH source target 返回被弹出的元素值<br>将源source列表最右端元素弹出，插入到目标target列表最左端<br>其中source和target可以相同，即将列表首尾对调<br>当source 为空时，执行会失败，返回空</li></ol><h3 id="LLEN-命令"><a href="#LLEN-命令" class="headerlink" title="LLEN 命令"></a>LLEN 命令</h3><ol><li>获取列表长度</li></ol><h3 id="LINDEX-命令"><a href="#LINDEX-命令" class="headerlink" title="LINDEX 命令"></a>LINDEX 命令</h3><ol><li>LINDEX list index 获取列表指定索引元素<br>index为正数： 左端为0， 范围为 0 – N-1<br>index为负数： 右端为-1， 范围为 -N – -1</li></ol><h3 id="LRANGE-命令"><a href="#LRANGE-命令" class="headerlink" title="LRANGE 命令"></a>LRANGE 命令</h3><ol><li>获取指定索引范围内的所有元素<br>LRANGE list start end<br>LRANGE list 0 -1 获取全部元素<br>当start和end都超出范围时，将会返回空列表；当只有一个超出时，Redis会对超出的索引进行修正，开始索引超出会被修正为0，结束索引会被修正为-1</li></ol><h3 id="LSET-命令"><a href="#LSET-命令" class="headerlink" title="LSET 命令"></a>LSET 命令</h3><ol><li>LSET list index new_value<br>对列表指定索引元素值更新</li></ol><h3 id="LINSERT-命令"><a href="#LINSERT-命令" class="headerlink" title="LINSERT 命令"></a>LINSERT 命令</h3><ol><li>LINSERT list BEFORE&#x2F;AFTER target_element new_element</li></ol><h3 id="LTRIM-裁剪"><a href="#LTRIM-裁剪" class="headerlink" title="LTRIM 裁剪"></a>LTRIM 裁剪</h3><ol><li>LTRIM list start index 删除索引范围外所有元素</li></ol><h3 id="LREM-移除"><a href="#LREM-移除" class="headerlink" title="LREM 移除"></a>LREM 移除</h3><ol><li>LREM list count element  返回被移除的元素数量<ul><li>如果count等于0，那么命令将会移除list中所有值等于element的元素</li><li>如果count等于正数，那么命令会从左端开始扫描，移除列表中值为element的count个元素</li><li>如果count等于负数，那么命令会从右端开始扫描，移除列表中值为element的abs(count)个元素</li></ul></li></ol><h3 id="BLPOP-阻塞式左端弹出"><a href="#BLPOP-阻塞式左端弹出" class="headerlink" title="BLPOP 阻塞式左端弹出"></a>BLPOP 阻塞式左端弹出</h3><ol><li>BLPOP list1 [ list2 list3 …] timeout<ul><li>命令会按照传入的列表从左至右挨个检查是否为空，如果发现某个列表不为空，那么执行LPOP操作，返回值为两个元素的数组，第一个元素是被弹出的列表list名，第二个元素是被弹出的元素值；</li><li>如果当前传入的所有list为空，那么Redis将会阻塞等待直至timeout超时，返回空值，超时时间单位为秒，设置为0时表示会一直等待</li><li>如果当前有多个客户端因为某个列表空而阻塞，那么按照先阻塞先服务原则进行唤醒</li><li>这个命令只会当前Redis客户端</li></ul></li></ol><h3 id="BRPOP-命令-与上同"><a href="#BRPOP-命令-与上同" class="headerlink" title="BRPOP 命令 与上同"></a>BRPOP 命令 与上同</h3><h3 id="BRPOPLPUSH-阻塞式弹出和推入操作-与上同"><a href="#BRPOPLPUSH-阻塞式弹出和推入操作-与上同" class="headerlink" title="BRPOPLPUSH 阻塞式弹出和推入操作 与上同"></a>BRPOPLPUSH 阻塞式弹出和推入操作 与上同</h3><ol><li>可用于实现带有阻塞式的消息队列</li></ol><h2 id="无序集合Set"><a href="#无序集合Set" class="headerlink" title="无序集合Set"></a>无序集合Set</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>说明无序集合，集合中元素不重复</p><h3 id="SADD-命令"><a href="#SADD-命令" class="headerlink" title="SADD 命令"></a>SADD 命令</h3><p>SADD set element [ element …]</p><p>返回值为新增元素个数，会去重</p><h3 id="SREM-命令"><a href="#SREM-命令" class="headerlink" title="SREM 命令"></a>SREM 命令</h3><p>SREM set element [element …]<br>移除一个或多个元素，返回真实移除元素的个数</p><h3 id="SMOVE-命令"><a href="#SMOVE-命令" class="headerlink" title="SMOVE 命令"></a>SMOVE 命令</h3><p><code>SMOVE source target element</code> 将指定元素从source移除，并且加入到目标集合，当source中不存在element的时候会返回失败</p><h3 id="SMEMBERS-命令"><a href="#SMEMBERS-命令" class="headerlink" title="SMEMBERS 命令"></a>SMEMBERS 命令</h3><p><code>SMEMBERS set</code> 获取集合所有元素</p><h3 id="SCARD-命令"><a href="#SCARD-命令" class="headerlink" title="SCARD 命令"></a>SCARD 命令</h3><ol><li><code>SCARD set</code> 获取集合元素个数</li></ol><h3 id="SISMEMBER-命令"><a href="#SISMEMBER-命令" class="headerlink" title="SISMEMBER 命令"></a>SISMEMBER 命令</h3><ol><li><code>SISMEMBER set element</code> 判断指定元素是否存在集合中</li></ol><h3 id="SRANDMEMBER-命令"><a href="#SRANDMEMBER-命令" class="headerlink" title="SRANDMEMBER 命令"></a>SRANDMEMBER 命令</h3><ol><li><p><code>SRANDMEMBER SET [count]</code> 随机获取集合汇总count个元素，count默认值为1</p></li><li><p>count为正数时候，返回随机不重复的min(count, SCARD) 个元素，属于不放回随机抽取</p></li><li><p>count为负数的时候，随机的机制发生变化，属于放回随机抽取，也就是说返回集合有可能出现重复的元素</p></li></ol><h3 id="SPOP-命令"><a href="#SPOP-命令" class="headerlink" title="SPOP 命令"></a>SPOP 命令</h3><ol><li><code>SPOP set [count]</code> 随机的重集中移除count个元素，返回被移除的元素集合</li></ol><h3 id="SINTER-x2F-SINTERSTORE-命令"><a href="#SINTER-x2F-SINTERSTORE-命令" class="headerlink" title="SINTER&#x2F;SINTERSTORE 命令"></a>SINTER&#x2F;SINTERSTORE 命令</h3><ol><li><p><code>SINTER set [set]</code> 求多个集合的交集</p></li><li><p><code>SINTER dest_set set [set ]</code> 求多个集合的交集，并将结果存储到新的集合中，返回新集合的元素个数</p></li></ol><h3 id="SUNION-x2F-SUNIONSTORE-命令"><a href="#SUNION-x2F-SUNIONSTORE-命令" class="headerlink" title="SUNION&#x2F;SUNIONSTORE 命令"></a>SUNION&#x2F;SUNIONSTORE 命令</h3><ol><li>并集, 含义同上</li></ol><h3 id="SDIFF-x2F-SDIFFSTORE-命令"><a href="#SDIFF-x2F-SDIFFSTORE-命令" class="headerlink" title="SDIFF&#x2F;SDIFFSTORE 命令"></a>SDIFF&#x2F;SDIFFSTORE 命令</h3><ol><li>差集，含义同上</li><li>集合操作都非常消耗性能，可能导致Redis主线程阻塞</li></ol><h2 id="有序集合Sorted-SET"><a href="#有序集合Sorted-SET" class="headerlink" title="有序集合Sorted SET"></a>有序集合Sorted SET</h2><h3 id="对应数据结构"><a href="#对应数据结构" class="headerlink" title="对应数据结构"></a>对应数据结构</h3><ol><li>同时具有有序和集合的性质</li><li>每个元素都由一个成员和一个与成员相关联的分值score组成</li><li>排行榜最佳实现</li></ol><p><code>sorted set</code></p><table><thead><tr><th align="center">score</th><th align="center">member</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">genge</td></tr><tr><td align="center">3</td><td align="center">apple</td></tr><tr><td align="center">7</td><td align="center">inuby</td></tr><tr><td align="center">7</td><td align="center">oiuby</td></tr><tr><td align="center">19</td><td align="center">qwmok</td></tr></tbody></table><h3 id="ZADD-命令"><a href="#ZADD-命令" class="headerlink" title="ZADD 命令"></a>ZADD 命令</h3><ol><li><code>ZADD sorted_set [CH] score element [score element]</code> 向有序集合中添加元素</li><li>默认返回新添加元素的个数，当命令带 CH 的时候返回修改元素的个数</li></ol><h3 id="ZREM-命令"><a href="#ZREM-命令" class="headerlink" title="ZREM 命令"></a>ZREM 命令</h3><ol><li><code>ZREM sorted_set member [member]</code>  移除指定元素  返回真实被移除的元素个数</li></ol><h3 id="ZSCORE-命令"><a href="#ZSCORE-命令" class="headerlink" title="ZSCORE 命令"></a>ZSCORE 命令</h3><ol><li><code>ZSCORE sorted_set member</code> 获取指定元素的分值</li></ol><h3 id="ZINCRBY-命令"><a href="#ZINCRBY-命令" class="headerlink" title="ZINCRBY 命令"></a>ZINCRBY 命令</h3><ol><li><code>ZINCRBY sorted_set increment_score memeber</code> 对指定元素的分值加减</li><li>当member不存在的时候，命令等同于ZADD</li></ol><h3 id="ZCARD-命令"><a href="#ZCARD-命令" class="headerlink" title="ZCARD 命令"></a>ZCARD 命令</h3><ol><li>获取有序集合元素个数</li></ol><h3 id="ZRANK-x2F-ZREVRANK-命令"><a href="#ZRANK-x2F-ZREVRANK-命令" class="headerlink" title="ZRANK&#x2F;ZREVRANK 命令"></a>ZRANK&#x2F;ZREVRANK 命令</h3><ol><li><code>ZRANK sorted_set member</code> 指定元素的的正排名 （从小到大）</li><li><code>ZREVRANK sorted_set member</code> 指定元素的的排名 （从大到小）</li></ol><h3 id="ZRANGE-x2F-ZREVRANGE-命令"><a href="#ZRANGE-x2F-ZREVRANGE-命令" class="headerlink" title="ZRANGE &#x2F; ZREVRANGE 命令"></a>ZRANGE &#x2F; ZREVRANGE 命令</h3><ol><li>获取指定范围内成员 <code>ZRANGE/ZREVRANGE sorted_set start end</code></li><li>start 和 end均可接受负值, 含义是排名</li><li><code>ZRANGE/ZREVRANGE sorted_set start end WITHSCORES</code> 会返回分值和元素值</li></ol><h3 id="ZRANGEBYSCORE-x2F-ZREVRANGEBYSCORE-命令"><a href="#ZRANGEBYSCORE-x2F-ZREVRANGEBYSCORE-命令" class="headerlink" title="ZRANGEBYSCORE&#x2F;ZREVRANGEBYSCORE 命令"></a>ZRANGEBYSCORE&#x2F;ZREVRANGEBYSCORE 命令</h3><ol><li><code>ZRANGEBYSCORE/ZREVRANGEBYSCORE sorted_set min max/max min</code> 获取指定范围分数内的成员</li><li><code>WITHSCORES</code> 可以附带返回分数值</li><li><code>LIMIT offset count</code> 可以限制返回元素的数量， offset为起止偏移量，count为最大返回数量</li><li><code>(min (max</code> 使用左括号的表示开区间，默认是闭区间</li><li><code>-inf +inf</code>来表示负无穷和正无穷</li></ol><h3 id="ZCOUNT-命令"><a href="#ZCOUNT-命令" class="headerlink" title="ZCOUNT 命令"></a>ZCOUNT 命令</h3><ol><li><code>ZCOUNT sorted_set min max</code> 获取指定分值范围内的成员数量</li><li>和上面的RAGNE命令相同，都支持开闭区间无穷等设置</li></ol><h3 id="ZREMRANGEBYRANK-命令"><a href="#ZREMRANGEBYRANK-命令" class="headerlink" title="ZREMRANGEBYRANK 命令"></a>ZREMRANGEBYRANK 命令</h3><ol><li><code>ZREMRANGEBYRANK sorted_set start end</code> 根据给定的排名区间来移除成员</li><li>参数支持负值，表示倒数排名</li></ol><h3 id="ZREMRANGEBYSCORE-命令"><a href="#ZREMRANGEBYSCORE-命令" class="headerlink" title="ZREMRANGEBYSCORE 命令"></a>ZREMRANGEBYSCORE 命令</h3><ol><li><code>ZREMRANGEBYSCORE sorted_set start end</code> 根据给定的分数区间来移除成员</li><li>和上面的RAGNE命令相同，都支持开闭区间无穷等设置</li></ol><h3 id="ZINTERSTORE-x2F-ZUNIONSTORE-命令"><a href="#ZINTERSTORE-x2F-ZUNIONSTORE-命令" class="headerlink" title="ZINTERSTORE&#x2F;ZUNIONSTORE 命令"></a>ZINTERSTORE&#x2F;ZUNIONSTORE 命令</h3><ol><li><code>ZINTERSTORE/ZUNIONSTORE destination numbers sorted_set [sorted_set ]</code> 求多个集合的交集和并集</li><li>numbers为sorted_set 参数的个数</li><li>返回交集元素或者并集元素个数</li><li>集合元素的分值是由两个集合分值的和</li><li><code>[AGGREGATE SUM/MIN/MAX]</code> 可以通过设置聚合函数来控制分值(求和&#x2F;最小值&#x2F;最大值)</li><li><code>[WEIGHTS w1 w2 w3]</code> 可以为每个集合设置权重，这样计算方式将会是分值乘以权重再相加</li><li>除此之外，还可以接受集合（非有序）来执行命令，此时score默认都是1，还可以带WEIGHTS</li></ol><h3 id="ZEANGEBYLEX-x2F-ZREVRANGEBYLEX-x2F-ZLEXCOUNT-x2F-ZREMRANGEBYLEX-系列命令"><a href="#ZEANGEBYLEX-x2F-ZREVRANGEBYLEX-x2F-ZLEXCOUNT-x2F-ZREMRANGEBYLEX-系列命令" class="headerlink" title="ZEANGEBYLEX&#x2F;ZREVRANGEBYLEX&#x2F;ZLEXCOUNT&#x2F;ZREMRANGEBYLEX 系列命令"></a>ZEANGEBYLEX&#x2F;ZREVRANGEBYLEX&#x2F;ZLEXCOUNT&#x2F;ZREMRANGEBYLEX 系列命令</h3><ol><li>以上所有命令格式雷同，都是处理当有序集合中分数全部相当的情况min和max分别指定是字典字母</li><li><code>ZEANGEBYLEX sorted_set min max</code></li><li>比如<code>ZEANGEBYLEX sorted_set - +</code>返回所有成员，<code>[a (t</code> 返回字典大于等于a并且小于t的所有成员</li><li>逆序&#x2F;成员个数&#x2F;移除操作都是类似的</li></ol><h3 id="ZPOPMAX-x2F-ZPOPMIN-命令"><a href="#ZPOPMAX-x2F-ZPOPMIN-命令" class="headerlink" title="ZPOPMAX&#x2F;ZPOPMIN 命令"></a>ZPOPMAX&#x2F;ZPOPMIN 命令</h3><ol><li>弹出分值最高或者最低分值的元素</li><li>返回成员和分值</li><li><code>ZPOPMAX sorted_set [count]</code>可以通过 count 来指定最多移除的成员数量，默认为1</li><li>Redis5.0  以上版本才支持</li></ol><h3 id="BZPOPMIN-x2F-BZPOPMAX-命令"><a href="#BZPOPMIN-x2F-BZPOPMAX-命令" class="headerlink" title="BZPOPMIN&#x2F;BZPOPMAX 命令"></a>BZPOPMIN&#x2F;BZPOPMAX 命令</h3><ol><li>阻塞式的最小或最大的弹出操作, 可以接受多个集合参数，进行遍历检测</li><li><code>BZPOPMIN/BZPOPMAX sorted_set [sorted_set ] timeout</code></li><li>timeout 为 0 表示无限阻塞等待</li></ol><h2 id="HperLogLog"><a href="#HperLogLog" class="headerlink" title="HperLogLog"></a>HperLogLog</h2><h3 id="HperLogLog数据结构"><a href="#HperLogLog数据结构" class="headerlink" title="HperLogLog数据结构"></a>HperLogLog数据结构</h3><ol><li>神奇的HyperLogLog算法<a href="http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html">http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html</a></li><li>Sketch of the Day: HyperLogLog — Cornerstone of a Big Data Infrastructure <a href="http://content.research.neustar.biz/blog/hll.html">http://content.research.neustar.biz/blog/hll.html</a></li><li>这是一个专门解决大数据计数器消耗太多内存问题的一个概率算法，只需要12k就可以统计2^64个元素</li><li>当然这不是精确统计，存在误差，数据量大的时候误差有的时候是允许的，可容允的</li></ol><h3 id="PFADD-命令"><a href="#PFADD-命令" class="headerlink" title="PFADD 命令"></a>PFADD 命令</h3><ol><li><code>PFADD hperloglog element [element]</code> 新增元素</li><li>当新增元素是的统计基数值发生变化就返回1，否则反正0</li></ol><h3 id="PFCOUNT-命令"><a href="#PFCOUNT-命令" class="headerlink" title="PFCOUNT 命令"></a>PFCOUNT 命令</h3><ol><li><code>PFCOUNT hyperloglog [hyperloglog ...]</code> 计算集合的近视基数</li><li>当参数为多个时候，计算方式为：首先求多个集合的并集，然后对并集求近视基数</li></ol><h3 id="PFMERGE-命令"><a href="#PFMERGE-命令" class="headerlink" title="PFMERGE 命令"></a>PFMERGE 命令</h3><ol><li><p><code>PFMERGE destination hyperloglog [hyperloglog ...]</code>  对多个hyperloglog集合求并集，然后将结果存在dest中</p></li><li><p>PFCOUNT 其实是有调用PFMERGE命令的</p></li></ol><h2 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h2><h3 id="位图结构"><a href="#位图结构" class="headerlink" title="位图结构"></a>位图结构</h3><ol><li><p>Redis位图bitmap是由多个二进制位组成的数组，数组中每一位都有与之对应的偏移量(索引)</p></li><li><p>BITMAP 图</p></li></ol><table><thead><tr><th>index</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>位</td><td>1</td><td>0</td><td>0</td><td>1｜</td></tr></tbody></table><h3 id="SETBIT-命令"><a href="#SETBIT-命令" class="headerlink" title="SETBIT 命令"></a>SETBIT 命令</h3><ol><li><code>SETBIT bitmap offset value</code> 设置指定偏移位的值</li><li>返回指定偏移量旧值，默认为0</li><li>bitmap默认按照字节扩展</li><li>offset只能为正值</li></ol><h3 id="GETBIT-命令"><a href="#GETBIT-命令" class="headerlink" title="GETBIT 命令"></a>GETBIT 命令</h3><ol><li><code>GETBIT bitmap offset</code>获取指定位置的值</li></ol><h3 id="BITCOUNT-命令"><a href="#BITCOUNT-命令" class="headerlink" title="BITCOUNT 命令"></a>BITCOUNT 命令</h3><ol><li><code>BITCOUNT bitmap</code> 统计位图中1的个数</li><li><code>BITCOUNT bitmap start end</code>  返回指定字节范围内1的个数，注意start和end为字节偏移量，并不是位offset， 可以使用负数作为参数</li></ol><h3 id="BITPOS-命令"><a href="#BITPOS-命令" class="headerlink" title="BITPOS 命令"></a>BITPOS 命令</h3><ol><li><code>BITPOS bitmap value</code> 查询bitmap中第一个被设置为value值的位置</li><li><code>BITPOS bitmap value [start end]</code>  在指定范围内查找，但是返回的offset是基于整个bigmap的偏移</li><li>start和end可以为负值</li></ol><h3 id="BITOP-命令"><a href="#BITOP-命令" class="headerlink" title="BITOP 命令"></a>BITOP 命令</h3><ol><li><code>BITOP OP result_key bitmap [bitmap ...]</code> 对多个bitmap数组执行op操作，将结果存储在result中</li><li>op可以是 AND &#x2F; OR &#x2F;XOR &#x2F; NOT</li></ol><h3 id="BITFIELD-命令"><a href="#BITFIELD-命令" class="headerlink" title="BITFIELD 命令"></a>BITFIELD 命令</h3><ol><li><code>BITFIELD bitmap SET type offset value</code> 根据位偏移来设置bitmap中值value，其中type是指定value的类型，比如i8：8位有符号，u16：16位无符号等</li><li>offset 可以换成 #index， 这样可以以字节位来索引具体位置，然后设置值</li><li>可以同时执行多个set命令</li><li><code>BITFIELD bitmap GET type offset/#index</code> 获取对应的值，同样的也可以同时执行多个GET</li><li><code>BITFIELD bitmap INCRYBY type offset/#index increment</code> 对指定范围值加减操作</li><li><code>BITFIELD bitmap [OVERFLOW WRAP/SAT/FAIL] INCRYBY type offset/#index increment</code> 可以用来处理加减法结果溢出的情况，分别为环绕&#x2F;饱和运算&#x2F;失败</li></ol><h3 id="BITMAP-STRING"><a href="#BITMAP-STRING" class="headerlink" title="BITMAP STRING"></a>BITMAP STRING</h3><ol><li>可以把二进制数组当作是字符串来操作</li><li>GET 命令来获取二进制数组值，返回值为二进制字符串</li><li>STRLEN 可以得到二进制字符串的长度</li><li>GETRANGE 获取指定范围的二进制字符串</li></ol><h2 id="GEO位置服务"><a href="#GEO位置服务" class="headerlink" title="GEO位置服务"></a>GEO位置服务</h2><h3 id="GEOADD-命令"><a href="#GEOADD-命令" class="headerlink" title="GEOADD 命令"></a>GEOADD 命令</h3><ol><li><code>GEOADD location_set longitude latitude name [longitude latitude name]</code> 添加一个或者多个位置坐标（经纬度）</li><li>当执行的是添加的，那么返回添加的位置个数；如果是更新那么返回0</li></ol><h3 id="GEOPOS-命令"><a href="#GEOPOS-命令" class="headerlink" title="GEOPOS 命令"></a>GEOPOS 命令</h3><ol><li><code>GEOPOS location_set name [name ...]</code>  获取指定位置的经纬度</li><li>返回值是数组，其中数组元素为二元数组，第一项为经度，第二项为纬度</li></ol><h3 id="GEODIST-命令"><a href="#GEODIST-命令" class="headerlink" title="GEODIST 命令"></a>GEODIST 命令</h3><ol><li><code>GEODIST location_set name1 name2</code> 计算俩个位置的直线距离</li><li>默认单位为米，可以通过<code>[unit]</code> 来指定单位m&#x2F;km&#x2F;mi英里&#x2F;ft英寸</li></ol><h3 id="GEORADIUS-命令"><a href="#GEORADIUS-命令" class="headerlink" title="GEORADIUS 命令"></a>GEORADIUS 命令</h3><ol><li><code>GEORADIUS location_set longitude latitude radius unit</code>  获取指定位置为中心点，radius半径内所有的地点</li><li><code>WITHDIST</code> 加上这个后缀参数，可以返回地点和地点与中心位置的直线距离</li><li><code>WITHCOORD</code>  返回地点和地点坐标</li><li><code>[ASD|DESC]</code> 对返回的结果排序</li><li><code>[COUNT n]</code>  限制返回地点的数量</li><li>可以同时指定多个可选参数</li></ol><h3 id="GEORADIUSBYMEMBER-命令"><a href="#GEORADIUSBYMEMBER-命令" class="headerlink" title="GEORADIUSBYMEMBER 命令"></a>GEORADIUSBYMEMBER 命令</h3><ol><li><code>longitude latitude</code> 参数换成 <code>name</code>地名</li></ol><h3 id="GEOHASH-命令"><a href="#GEOHASH-命令" class="headerlink" title="GEOHASH 命令"></a>GEOHASH 命令</h3><ol><li>获取指定位置的GEOhash值，GEOhash值是经纬度转换而来，并且可以通过GEohash来计算得到经纬度</li><li>在上面的两个命令中都可以指定<code>WITHHASH</code>  来返回GEOHASH 而非 经纬度</li></ol><h3 id="GEO数据内部存储结构"><a href="#GEO数据内部存储结构" class="headerlink" title="GEO数据内部存储结构"></a>GEO数据内部存储结构</h3><ol><li>为有序集合，因此可以使用ZSORTED来操作数据，其中score为Geohash值</li></ol><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis-数据结构与应用&quot;&gt;&lt;a href=&quot;#Redis-数据结构与应用&quot; class=&quot;headerlink&quot; title=&quot;Redis 数据结构与应用&quot;&gt;&lt;/a&gt;Redis 数据结构与应用&lt;/h1&gt;&lt;h2 id=&quot;普通字符串&quot;&gt;&lt;a href=&quot;#普通字符</summary>
      
    
    
    
    <category term="Redis" scheme="https://blog.genge.cc/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://blog.genge.cc/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>批量转换换行符CRLF到LF</title>
    <link href="https://blog.genge.cc/2020/02/12/%E6%89%B9%E9%87%8F%E6%8D%A2%E8%A1%8C%E7%AC%A6%E8%BD%AC%E6%8D%A2CRLF%E5%88%B0LF/"/>
    <id>https://blog.genge.cc/2020/02/12/%E6%89%B9%E9%87%8F%E6%8D%A2%E8%A1%8C%E7%AC%A6%E8%BD%AC%E6%8D%A2CRLF%E5%88%B0LF/</id>
    <published>2020-02-12T05:25:41.000Z</published>
    <updated>2020-02-12T05:29:27.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关闭Git自动转换功能"><a href="#关闭Git自动转换功能" class="headerlink" title="关闭Git自动转换功能"></a>关闭Git自动转换功能</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="CRLF转换成LF"><a href="#CRLF转换成LF" class="headerlink" title="CRLF转换成LF"></a>CRLF转换成LF</h2><p><strong>vscode或者visual studio等一些代码编辑器仅仅支持单个文件的格式转换，以下三种方法均是支持批量转换的方法</strong></p><h3 id="第一种方法-亲测"><a href="#第一种方法-亲测" class="headerlink" title="第一种方法 (亲测))"></a>第一种方法 (亲测))</h3><p>已经上传到<code>/y-server/doc/format/</code> 目录下 或者点击下面链接下载最新</p><p><a href="https://waterlan.home.xs4all.nl/dos2unix/dos2unix-7.4.1-win64.zip" target="_blank" rel="noopener">下载dos2unix工具包</a></p><p><a href="https://waterlan.home.xs4all.nl/dos2unix/zh_CN/man1/dos2unix.htm#9" target="_blank" rel="noopener">dos2unix文档说明</a></p><p>结合 find(1) 和 xargs(1) 使用 dos2unix 可以递归地转换目录树中的文本文件。例如，转换当前目录的目录树中所有的 .txt 文件：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dos2unix &lt; <span class="keyword">a</span>.txt</span><br><span class="line">cat <span class="keyword">a</span>.txt | dos2unix</span><br></pre></td></tr></table></figure><p>若文件名中有空格或引号，则需要使用 find(1) 选项 -print0 及相应的 xargs(1) 选项 -0；其他情况下则可以省略它们。也可以结合 -exec 选项来使用 find(1)：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> . -<span class="built_in">name</span> <span class="string">'*.txt'</span> -<span class="built_in">exec</span> dos2unix &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>在Windows命令提示符中，可以使用下列命令：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> /R %G in (*.txt) <span class="keyword">do</span> dos2unix <span class="string">"%G"</span></span><br></pre></td></tr></table></figure><p>PowerShell用户可以在Windows PowerShell中使用如下命令：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-childitem</span> -<span class="string">path </span>. -<span class="string">filter </span><span class="string">'*.txt'</span> -<span class="string">recurse </span>| <span class="string">foreach-object </span>&#123;<span class="string">dos2unix </span>$_.<span class="string">Fullname&#125;</span></span><br></pre></td></tr></table></figure><h3 id="第二种方法-没有尝试"><a href="#第二种方法-没有尝试" class="headerlink" title="第二种方法 (没有尝试)"></a>第二种方法 (没有尝试)</h3><p>采用EditPlus批量转换文件格式</p><p><img src="https://img-blog.csdnimg.cn/20190414011144786.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/20190414011207506.png" alt="2"><br><img src="https://img-blog.csdnimg.cn/20190414011249745.png" alt="2"></p><h3 id="第三种方法-没有尝试"><a href="#第三种方法-没有尝试" class="headerlink" title="第三种方法 (没有尝试)"></a>第三种方法 (没有尝试)</h3><p><a href="https://rizon.top/tech/%E8%BD%AC%E6%8D%A2crlf%E5%88%B0lf/" target="_blank" rel="noopener">巧妙的借助git快速批量转换crlf到lf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关闭Git自动转换功能&quot;&gt;&lt;a href=&quot;#关闭Git自动转换功能&quot; class=&quot;headerlink&quot; title=&quot;关闭Git自动转换功能&quot;&gt;&lt;/a&gt;关闭Git自动转换功能&lt;/h2&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="git" scheme="https://blog.genge.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Flag</title>
    <link href="https://blog.genge.cc/2020/02/05/Flag/"/>
    <id>https://blog.genge.cc/2020/02/05/Flag/</id>
    <published>2020-02-05T06:54:05.000Z</published>
    <updated>2020-02-05T06:57:28.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重要的事情说三遍"><a href="#重要的事情说三遍" class="headerlink" title="重要的事情说三遍"></a><strong>重要的事情说三遍</strong></h2><ul><li>做完功能要自测！！！</li><li>做完功能要自测！！！</li><li>做完功能要自测！！！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;重要的事情说三遍&quot;&gt;&lt;a href=&quot;#重要的事情说三遍&quot; class=&quot;headerlink&quot; title=&quot;重要的事情说三遍&quot;&gt;&lt;/a&gt;&lt;strong&gt;重要的事情说三遍&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;做完功能要自测！！！&lt;/li&gt;
&lt;li&gt;做完功</summary>
      
    
    
    
    <category term="emotion" scheme="https://blog.genge.cc/categories/emotion/"/>
    
    
    <category term="flag" scheme="https://blog.genge.cc/tags/flag/"/>
    
  </entry>
  
  <entry>
    <title>Linux shell语言——dash和bash</title>
    <link href="https://blog.genge.cc/2020/01/23/Linux%20shell%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94dash%E5%92%8Cbash/"/>
    <id>https://blog.genge.cc/2020/01/23/Linux%20shell%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94dash%E5%92%8Cbash/</id>
    <published>2020-01-23T07:13:45.000Z</published>
    <updated>2020-07-21T13:52:02.551Z</updated>
    
    <content type="html"><![CDATA[<p>什么是bash ？</p><p>Bash(GNU Bourne-Again Shell)是许多Linux平台的内定Shell，事实上，还有许多传统UNIX上用的Shell，像tcsh、csh、ash、bsh、ksh等等。</p><p>GNU/Linux 操作系统中的 /bin/sh 本是 bash (Bourne-Again Shell) 的符号链接，但鉴于 bash 过于复杂，有人把 bash 从 NetBSD 移植到 Linux 并更名为 dash (Debian Almquist Shell)，并建议将 /bin/sh 指向它，以获得更快的脚本执行速度。Dash Shell 比 Bash Shell 小的多，符合POSIX标准。</p><p>Debian和Ubuntu中，/bin/sh默认已经指向dash，这是一个不同于bash的shell，它主要是为了执行脚本而出现，而不是交互，它速度更快，但功能相比bash要少很多，语法严格遵守POSIX标准。</p><p>就是这个倒霉的dash解释器使得我按照bash语法写的shell 脚本不能运行。</p><p>要知道自己的/bin/sh指向何种解释器，可以用 ls /bin/sh -al 命令查看：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls /bin/sh -al</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">4</span> <span class="number">11</span>月 <span class="number">16</span> <span class="number">15</span>:<span class="number">33</span> /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure><p>以上结果就表示当前系统用的是dash解释器。</p><p>切换到bash的方式其实挺简单的，关键是一直没找出这个原因……</p><p>修改默认的sh，可以采用命令<code>sudo dpkg-reconfigure dash</code></p><p>会出现一个图片状的配置菜单，选no就可以了</p><p>再次检查一下， ls /bin/sh -al 发现软链接指向/bin/bash</p><pre><code>lrwxrwxrwx 1 root root 4 11月 16 15:33 /bin/sh -&gt; bash</code></pre><p>注：dash 和 bash 语法上的主要的区别有:</p><ol><li>定义函数</li></ol><p>bash: function在bash中为关键字</p><p>dash: dash中没有function这个关键字</p><ol start="2"><li>select var in list; do command; done</li></ol><p>bash:支持</p><p>dash:不支持, 替代方法:采用while+read+case来实现</p><ol start="3"><li>echo {0..10}</li></ol><p>bash:支持{n..m}展开</p><p>dash:不支持，替代方法, 采用seq外部命令</p><ol start="4"><li>here string</li></ol><p>bash:支持here string</p><p>dash:不支持, 替代方法:可采用here documents</p><ol start="5"><li><blockquote><p>&amp;word重定向标准输出和标准错误</p></blockquote></li></ol><p>bash: 当word为非数字时，&gt;&amp;word变成重定向标准错误和标准输出到文件word</p><p>dash: &gt;&amp;word, word不支持非数字, 替代方法: &gt;word 2&gt;&1; 常见用法 &gt;/dev/null 2&gt;&amp;1</p><ol start="6"><li>数组</li></ol><p>bash: 支持数组, bash4支持关联数组</p><p>dash: 不支持数组，替代方法, 采用变量名+序号来实现类似的效果</p><ol start="7"><li>子字符串扩展</li></ol><p>bash: 支持${parameter:offset:length},${parameter:offset}</p><p>dash: 不支持， 替代方法:采用expr或cut外部命令代替</p><ol start="8"><li>大小写转换</li></ol><p>bash: 支持${parameter^pattern},${parameter^^pattern},${parameter,pattern},${parameter,,pattern}</p><p>dash: 不支持，替代方法:采用tr/sed/awk等外部命令转换</p><ol start="9"><li>进程替换&lt;(command), &gt;(command)</li></ol><p>bash: 支持进程替换</p><p>dash: 不支持, 替代方法, 通过临时文件中转</p><ol start="10"><li>[ string1 = string2 ] 和 [ string1 == string2 ]</li></ol><p>bash: 支持两者</p><p>dash: 只支持=</p><ol start="11"><li>[[ 加强版test</li></ol><p>bash: 支持[[ ]], 可实现正则匹配等强大功能</p><p>dash: 不支持[[ ]], 替代方法，采用外部命令</p><ol start="12"><li>for (( expr1 ; expr2 ; expr3 )) ; do list ; done</li></ol><p>bash: 支持C语言格式的for循环</p><p>dash: 不支持该格式的for, 替代方法，用while+$((expression))实现</p><ol start="13"><li>let命令和((expression))</li></ol><p>bash: 有内置命令let, 也支持((expression))方式</p><p>dash: 不支持，替代方法，采用$((expression))或者外部命令做计算</p><ol start="14"><li>$((expression))</li></ol><p>bash: 支持id++,id–,++id,–id这样到表达式</p><p>dash: 不支持++,–, 替代方法:id+=1,id-=1, id=id+1,id=id-1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是bash ？&lt;/p&gt;
&lt;p&gt;Bash(GNU Bourne-Again Shell)是许多Linux平台的内定Shell，事实上，还有许多传统UNIX上用的Shell，像tcsh、csh、ash、bsh、ksh等等。&lt;/p&gt;
&lt;p&gt;GNU/Linux 操作系统中的 /</summary>
      
    
    
    
    <category term="Shell" scheme="https://blog.genge.cc/categories/Shell/"/>
    
    
    <category term="linux" scheme="https://blog.genge.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>单生产者单消费者环形缓冲</title>
    <link href="https://blog.genge.cc/2020/01/23/%E5%8D%95%E7%94%9F%E4%BA%A7%E8%80%85%E5%8D%95%E6%B6%88%E8%B4%B9%E8%80%85%E7%8E%AF%E5%BD%A2%E7%BC%93%E5%86%B2/"/>
    <id>https://blog.genge.cc/2020/01/23/%E5%8D%95%E7%94%9F%E4%BA%A7%E8%80%85%E5%8D%95%E6%B6%88%E8%B4%B9%E8%80%85%E7%8E%AF%E5%BD%A2%E7%BC%93%E5%86%B2/</id>
    <published>2020-01-23T07:12:50.000Z</published>
    <updated>2020-07-21T13:52:02.556Z</updated>
    
    <content type="html"><![CDATA[<p>头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SIMPLE_LOOP_BUFFER_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SIMPLE_LOOP_BUFFER_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gntype.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gnmutex.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gnlock.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"server_define.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Storm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">tagBlock</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    _tagBlock() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(pBuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(MAX_CACHE_PACKET_SIZE + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ~_tagBlock() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>  pBuffer[MAX_CACHE_PACKET_SIZE + <span class="number">1</span>]; </span><br><span class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">GetBuff</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> pBuffer; &#125;</span><br><span class="line">    <span class="function">int32 <span class="title">GetBuffLen</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> MAX_CACHE_PACKET_SIZE + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;CBlock;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSimpleLoopBufferEx</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CSimpleLoopBufferEx();</span><br><span class="line">    ~CSimpleLoopBufferEx();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief</span></span><br><span class="line"><span class="comment">    * 初始化循环缓冲区</span></span><br><span class="line"><span class="comment">    * @param nSize : 初始化虚幻缓冲区的大小，实际大小为nSize+1</span></span><br><span class="line"><span class="comment">    * @return 成功返回true，失败返回false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief</span></span><br><span class="line"><span class="comment">    * 将需要存储的Buffer拷贝到循环缓冲区的结尾</span></span><br><span class="line"><span class="comment">    * @param pData : [输入参数]指向需要插入循环缓冲区的Buffer起始位置</span></span><br><span class="line"><span class="comment">    * @param nLen : 指向需要插入的Buffer的长度</span></span><br><span class="line"><span class="comment">    * @return 如果循环缓冲区拥有的大小大于等于nLen，返回true，否则返回false</span></span><br><span class="line"><span class="comment">    * @remark 此函数不是线程安全的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">INT32 <span class="title">PushBack</span><span class="params">(<span class="keyword">const</span> CHAR *pData, INT32 nLen)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief</span></span><br><span class="line"><span class="comment">    * 从循环缓冲区的起始位置取nLen长度的Buffer，拷贝放入Buffer中</span></span><br><span class="line"><span class="comment">    * @param pBuf : [输入输出参数]获取数据的Buffer的起始指针</span></span><br><span class="line"><span class="comment">    * @param nLen : 需要读出的Buffer长度</span></span><br><span class="line"><span class="comment">    * @return 如果有足够所需读出的数据，返回true，否则返回false</span></span><br><span class="line"><span class="comment">    * @remark 此函数不是线程安全的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">INT32 <span class="title">PopFront</span><span class="params">(CHAR * &amp;pBuf, INT32 nLen,CHAR* szData)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief</span></span><br><span class="line"><span class="comment">    * 丢弃nLen长度的数据</span></span><br><span class="line"><span class="comment">    * @param nLen : 需要丢弃的长度</span></span><br><span class="line"><span class="comment">    * @return void</span></span><br><span class="line"><span class="comment">    * @remark 此函数不是线程安全的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">DiscardFront</span><span class="params">(INT32 nLen)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief</span></span><br><span class="line"><span class="comment">    * 获取剩余可用空间大小</span></span><br><span class="line"><span class="comment">    * @return INT32</span></span><br><span class="line"><span class="comment">    * @remark 此函数不是线程安全的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">INT32 <span class="title">GetFreeSpare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @brief</span></span><br><span class="line"><span class="comment">    * 拷贝内存中的数据</span></span><br><span class="line"><span class="comment">    * @param nReadOffSet : m_pNextRead的偏移量</span></span><br><span class="line"><span class="comment">    * @param nLen : 需要读出的Buffer长度</span></span><br><span class="line"><span class="comment">    * @remark 此函数不是线程安全的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">INT32 <span class="title">GetData</span><span class="params">(INT32 nReadOffSet,INT32 nLen, CHAR* szData)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CHAR    *m_pBuffer;</span><br><span class="line">    CHAR    *m_pNextRead;</span><br><span class="line">    CHAR    *m_pNextWrite;</span><br><span class="line">    CHAR    *m_pEnd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"simpleloopbuffer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gndebug.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../common/commonloggerex.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gate_factory.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Storm;</span><br><span class="line"></span><br><span class="line">CSimpleLoopBufferEx::CSimpleLoopBufferEx() :</span><br><span class="line">    m_pBuffer(<span class="literal">NULL</span>),</span><br><span class="line">    m_pNextRead(<span class="literal">NULL</span>),</span><br><span class="line">    m_pNextWrite(<span class="literal">NULL</span>),</span><br><span class="line">    m_pEnd(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSimpleLoopBufferEx::~CSimpleLoopBufferEx()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != m_pBuffer)</span><br><span class="line">    &#123;</span><br><span class="line">        CGateFactory::Instance()-&gt;ReleaseBlock((CBlock*)m_pBuffer);</span><br><span class="line">        m_pBuffer = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//delete[] m_pBuffer;</span></span><br><span class="line">        <span class="comment">//m_pBuffer = NULL;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CSimpleLoopBufferEx::Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_pNextRead = m_pBuffer;</span><br><span class="line">    m_pNextWrite = m_pBuffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CSimpleLoopBufferEx::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//m_pBuffer = SDNew char[nSize + 1];</span></span><br><span class="line">    CBlock* pBlock = CGateFactory::Instance()-&gt;CreateBlock();</span><br><span class="line">    <span class="keyword">if</span> (!pBlock)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    m_pBuffer = pBlock-&gt;GetBuff();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == m_pBuffer)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_pNextRead = m_pBuffer;</span><br><span class="line">    m_pNextWrite = m_pBuffer;</span><br><span class="line">    <span class="comment">//m_pEnd = m_pBuffer + nSize + 1;</span></span><br><span class="line">    m_pEnd = m_pBuffer + pBlock-&gt;GetBuffLen();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">INT32 <span class="title">CSimpleLoopBufferEx::PushBack</span><span class="params">(<span class="keyword">const</span> CHAR *pData, INT32 nLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CHAR* poRead = m_pNextRead;</span><br><span class="line">    <span class="keyword">if</span> (m_pNextWrite &gt;= poRead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  1、尾部指针减去写起始位置小于 nLen </span></span><br><span class="line">        <span class="comment">//  2、读的起始位置减去内存首地址 小于nLen</span></span><br><span class="line">        <span class="comment">//  内存空间不够，不能将数据写入缓存</span></span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">                   (empty)             m_pNextRead         m_pNextWrite       (empty)</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        INT32 nRight = m_pEnd - m_pNextWrite;</span><br><span class="line">        INT32 nLeft = poRead - m_pBuffer;</span><br><span class="line">        <span class="keyword">if</span> (nLeft + nRight &lt;= nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">                                       m_pNextWrite (empty) m_pNextRead</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (poRead - m_pNextWrite &lt;= nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//     else  //  m_pNextWrite == m_pNextRead</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         if (m_pNextWrite &gt; m_pBuffer)</span></span><br><span class="line">    <span class="comment">//         &#123;</span></span><br><span class="line">    <span class="comment">//             m_oMutex.Unlock();</span></span><br><span class="line">    <span class="comment">//             return -3;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (m_pEnd - m_pNextWrite &gt; nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(m_pNextWrite, pData, nLen);</span><br><span class="line">        m_pNextWrite += nLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_pEnd - m_pNextWrite == nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(m_pNextWrite, pData, nLen);</span><br><span class="line">        m_pNextWrite = m_pBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        INT32 nStartLen = m_pEnd - m_pNextWrite;</span><br><span class="line">        <span class="built_in">memcpy</span>(m_pNextWrite, pData, nStartLen);</span><br><span class="line">        <span class="built_in">memcpy</span>(m_pBuffer, pData + nStartLen, nLen - nStartLen);</span><br><span class="line">        m_pNextWrite = m_pBuffer + nLen - nStartLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">INT32 <span class="title">CSimpleLoopBufferEx::PopFront</span><span class="params">(CHAR * &amp;pBuf, INT32 nLen, CHAR* szData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CHAR* poNextWrite = m_pNextWrite;</span><br><span class="line">    <span class="keyword">if</span> (poNextWrite == m_pNextRead)</span><br><span class="line">    &#123;</span><br><span class="line">        EXLOG_ERROR &lt;&lt; <span class="string">"[%s:%d]:PopFront failed! ErrCode:-1"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (poNextWrite &gt; m_pNextRead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">                   (empty)             m_pNextRead         m_pNextWrite       (empty)</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (poNextWrite - m_pNextRead &lt; nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            EXLOG_ERROR &lt;&lt; <span class="string">"PopFront failed! ErrCode:-2"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">                                      m_pNextWrite (empty) m_pNextRead</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        INT32 nRight = m_pEnd - m_pNextRead;</span><br><span class="line">        INT32 nLeft = poNextWrite - m_pBuffer;</span><br><span class="line">        <span class="keyword">if</span> (nLeft + nRight &lt; nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            EXLOG_ERROR &lt;&lt; <span class="string">"[%s:%d]:PopFront failed! ErrCode:-3"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pEnd - m_pNextRead &gt; nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(szData, m_pNextRead, nLen);</span><br><span class="line">        m_pNextRead += nLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_pEnd - m_pNextRead == nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(szData, m_pNextRead, nLen);</span><br><span class="line">        m_pNextRead = m_pBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        INT32 nStartLen = m_pEnd - m_pNextRead;</span><br><span class="line">        <span class="built_in">memcpy</span>(szData, m_pNextRead, nStartLen);</span><br><span class="line">        <span class="built_in">memcpy</span>(szData + nStartLen, m_pBuffer, nLen - nStartLen);</span><br><span class="line">        m_pNextRead = m_pBuffer + nLen - nStartLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CSimpleLoopBufferEx::DiscardFront</span><span class="params">(INT32 nLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CHAR* poNextWrite = m_pNextWrite;</span><br><span class="line">    <span class="keyword">if</span> (poNextWrite == m_pNextRead)</span><br><span class="line">    &#123;</span><br><span class="line">        EXLOG_ERROR &lt;&lt; <span class="string">"[%s:%d]:PopFront failed! ErrCode:-1"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (poNextWrite &gt; m_pNextRead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        (empty)             m_pNextRead         m_pNextWrite       (empty)</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (poNextWrite - m_pNextRead &lt; nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            EXLOG_ERROR &lt;&lt; <span class="string">"[%s:%d]:PopFront failed! ErrCode:-2"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        m_pNextWrite (empty) m_pNextRead</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        INT32 nRight = m_pEnd - m_pNextRead;</span><br><span class="line">        INT32 nLeft = poNextWrite - m_pBuffer;</span><br><span class="line">        <span class="keyword">if</span> (nLeft + nRight &lt; nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            EXLOG_ERROR &lt;&lt; <span class="string">"[%s:%d]:PopFront failed! ErrCode:-3"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pEnd - m_pNextRead &gt; nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pNextRead += nLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_pEnd - m_pNextRead == nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pNextRead = m_pBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        INT32 nStartLen = m_pEnd - m_pNextRead;</span><br><span class="line">        m_pNextRead = m_pBuffer + nLen - nStartLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">INT32 <span class="title">CSimpleLoopBufferEx::GetFreeSpare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CHAR* poRead = m_pNextRead;</span><br><span class="line">    <span class="keyword">if</span> (m_pNextWrite &gt;= poRead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  1、尾部指针减去写起始位置小于 nLen </span></span><br><span class="line">        <span class="comment">//  2、读的起始位置减去内存首地址 小于nLen</span></span><br><span class="line">        <span class="comment">//  内存空间不够，不能将数据写入缓存</span></span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        (empty)             m_pNextRead         m_pNextWrite       (empty)</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        INT32 nRight = m_pEnd - m_pNextWrite;</span><br><span class="line">        INT32 nLeft = poRead - m_pBuffer;</span><br><span class="line">        <span class="keyword">return</span> nLeft + nRight;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        m_pNextWrite (empty) m_pNextRead</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> poRead - m_pNextWrite;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">INT32 <span class="title">CSimpleLoopBufferEx::GetData</span><span class="params">(INT32 nReadOffSet, INT32 nLen, CHAR* szData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//指针偏移</span></span><br><span class="line">    CHAR* poNextWrite = m_pNextWrite;</span><br><span class="line">    <span class="keyword">if</span> (poNextWrite == m_pNextRead)</span><br><span class="line">    &#123;</span><br><span class="line">        EXLOG_ERROR &lt;&lt; <span class="string">"[%s:%d]:PopFront failed! ErrCode:-1"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CHAR *pReadOffSet = m_pNextRead + nReadOffSet;</span><br><span class="line">    <span class="keyword">if</span> (poNextWrite &gt; m_pNextRead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        (empty)             m_pNextRead         m_pNextWrite       (empty)</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pReadOffSet &gt;= m_pNextWrite)</span><br><span class="line">        &#123;</span><br><span class="line">            EXLOG_ERROR &lt;&lt; <span class="string">"GetData failed! ErrCode:-2"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        m_pNextWrite (empty) m_pNextRead</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pReadOffSet &lt; m_pEnd)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pReadOffSet == m_pEnd)</span><br><span class="line">        &#123;</span><br><span class="line">            pReadOffSet = m_pBuffer;</span><br><span class="line">            <span class="keyword">if</span> (pReadOffSet &gt;= m_pNextWrite)</span><br><span class="line">            &#123;</span><br><span class="line">                EXLOG_ERROR &lt;&lt; <span class="string">"GetData failed! ErrCode:-3"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pReadOffSet = m_pBuffer + nReadOffSet - (m_pEnd - m_pNextRead);</span><br><span class="line">            <span class="keyword">if</span> (pReadOffSet &gt;= m_pNextWrite)</span><br><span class="line">            &#123;</span><br><span class="line">                EXLOG_ERROR &lt;&lt; <span class="string">"GetData failed! ErrCode:-4"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (poNextWrite &gt; pReadOffSet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        (empty)             m_pNextRead         m_pNextWrite       (empty)</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (poNextWrite - pReadOffSet &lt; nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            EXLOG_ERROR &lt;&lt; <span class="string">"PopFront failed! ErrCode:-5"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*                          == 内存模型 ==</span></span><br><span class="line"><span class="comment">        m_pNextWrite (empty) m_pNextRead</span></span><br><span class="line"><span class="comment">        |----------------------------------|--------------------|---------------------|</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        INT32 nRight = m_pEnd - pReadOffSet;</span><br><span class="line">        INT32 nLeft = poNextWrite - m_pBuffer;</span><br><span class="line">        <span class="keyword">if</span> (nLeft + nRight &lt; nLen)</span><br><span class="line">        &#123;</span><br><span class="line">            EXLOG_ERROR &lt;&lt; <span class="string">"[%s:%d]:PopFront failed! ErrCode:-6"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pEnd - pReadOffSet &gt; nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(szData, pReadOffSet, nLen);</span><br><span class="line">        <span class="comment">//pReadOffSet += nLen;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_pEnd - pReadOffSet == nLen)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(szData, pReadOffSet, nLen);</span><br><span class="line">        <span class="comment">//pReadOffSet = m_pBuffer;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        INT32 nStartLen = m_pEnd - pReadOffSet;</span><br><span class="line">        <span class="built_in">memcpy</span>(szData, pReadOffSet, nStartLen);</span><br><span class="line">        <span class="built_in">memcpy</span>(szData + nStartLen, m_pBuffer, nLen - nStartLen);</span><br><span class="line">        <span class="comment">//m_pNextRead = m_pBuffer + nLen - nStartLen;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nLen;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;头文件&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="C/C++" scheme="https://blog.genge.cc/categories/C-C/"/>
    
    
    <category term="ringbuff" scheme="https://blog.genge.cc/tags/ringbuff/"/>
    
  </entry>
  
  <entry>
    <title>各类APP排行榜实现</title>
    <link href="https://blog.genge.cc/2020/01/23/%E5%90%84%E7%B1%BBAPP%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%AE%9E%E7%8E%B0/"/>
    <id>https://blog.genge.cc/2020/01/23/%E5%90%84%E7%B1%BBAPP%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-01-23T07:12:45.000Z</published>
    <updated>2020-07-21T13:52:02.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><ol><li>查看TopN的用户排名</li><li>查看自己的排名</li><li>用户积分变更后，排名及时更新</li></ol><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="方案一-利用MYSQL-排序"><a href="#方案一-利用MYSQL-排序" class="headerlink" title="方案一 利用MYSQL 排序"></a>方案一 利用MYSQL 排序</h3><p>利用MySQL来实现，存放一张用户积分表user_score<br>取前top N，自己的排名都可以通过简单的sql语句搞定。<br>算法简单，利用sql的功能，不需要其他复杂逻辑，对于数据量比较少、性能要求不高，可以使用。但是对于海量数据，性能是无法接受的。可能会导致全局锁表之类的问题。</p><h3 id="方案二-内存数组排序"><a href="#方案二-内存数组排序" class="headerlink" title="方案二 内存数组排序"></a>方案二 内存数组排序</h3><p>在内存中预分配所要排名用户大小的数组，所有的积分排名变更基于此移动元素，成熟排序算法有最小/大堆、快速排序等，这种方案优点是当数据量小的时候，简单快捷，容易实现，不需要其他任何组件支持，但是当面对海量数据的时候数组空间占用可能不太现实</p><h3 id="方案三-利用GCC库支持"><a href="#方案三-利用GCC库支持" class="headerlink" title="方案三 利用GCC库支持"></a>方案三 利用GCC库支持</h3><p>具体的，用GCC的pb_ds库中有assoc_container来进行实现。<br>参考<a href="https://opensource.apple.com/source/llvmgcc42/llvmgcc42-2336.9/libstdc++-v3/testsuite/ext/pb_ds/example/tree_order_statistics.cc" target="_blank" rel="noopener">tree_order_statistics.cc</a>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> pb_ds;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> pb_ds;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A red-black tree table storing ints and their order</span></span><br><span class="line"><span class="comment">// statistics. Note that since the tree uses</span></span><br><span class="line"><span class="comment">// tree_order_statistics_node_update as its update policy, then it</span></span><br><span class="line"><span class="comment">// includes its methods by_order and order_of_key.</span></span><br><span class="line"><span class="keyword">typedef</span></span><br><span class="line">tree&lt;</span><br><span class="line">  <span class="keyword">int</span>,</span><br><span class="line">  null_mapped_type,</span><br><span class="line">  less&lt;<span class="keyword">int</span>&gt;,</span><br><span class="line">  rb_tree_tag,</span><br><span class="line">  <span class="comment">// This policy updates nodes' metadata for order statistics.</span></span><br><span class="line">  tree_order_statistics_node_update&gt;</span><br><span class="line"><span class="keyword">set_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Insert some entries into s.</span></span><br><span class="line">  <span class="keyword">set_t</span> s;</span><br><span class="line">  s.insert(<span class="number">12</span>);</span><br><span class="line">  s.insert(<span class="number">505</span>);</span><br><span class="line">  s.insert(<span class="number">30</span>);</span><br><span class="line">  s.insert(<span class="number">1000</span>);</span><br><span class="line">  s.insert(<span class="number">10000</span>);</span><br><span class="line">  s.insert(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The order of the keys should be: 12, 30, 100, 505, 1000, 10000.</span></span><br><span class="line">  assert(*s.find_by_order(<span class="number">0</span>) == <span class="number">12</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">1</span>) == <span class="number">30</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">2</span>) == <span class="number">100</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">3</span>) == <span class="number">505</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">4</span>) == <span class="number">1000</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">5</span>) == <span class="number">10000</span>);</span><br><span class="line">  assert(s.find_by_order(<span class="number">6</span>) == s.end());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The order of the keys should be: 12, 30, 100, 505, 1000, 10000.</span></span><br><span class="line">  assert(s.order_of_key(<span class="number">10</span>) == <span class="number">0</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">12</span>) == <span class="number">0</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">15</span>) == <span class="number">1</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">30</span>) == <span class="number">1</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">99</span>) == <span class="number">2</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">100</span>) == <span class="number">2</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">505</span>) == <span class="number">3</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">1000</span>) == <span class="number">4</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">10000</span>) == <span class="number">5</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">9999999</span>) == <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Erase an entry.</span></span><br><span class="line">  s.erase(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The order of the keys should be: 12, 100, 505, 1000, 10000.</span></span><br><span class="line">  assert(*s.find_by_order(<span class="number">0</span>) == <span class="number">12</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">1</span>) == <span class="number">100</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">2</span>) == <span class="number">505</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">3</span>) == <span class="number">1000</span>);</span><br><span class="line">  assert(*s.find_by_order(<span class="number">4</span>) == <span class="number">10000</span>);</span><br><span class="line">  assert(s.find_by_order(<span class="number">5</span>) == s.end());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The order of the keys should be: 12, 100, 505, 1000, 10000.</span></span><br><span class="line">  assert(s.order_of_key(<span class="number">10</span>) == <span class="number">0</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">12</span>) == <span class="number">0</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">100</span>) == <span class="number">1</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">505</span>) == <span class="number">2</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">707</span>) == <span class="number">3</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">1000</span>) == <span class="number">3</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">1001</span>) == <span class="number">4</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">10000</span>) == <span class="number">4</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">100000</span>) == <span class="number">5</span>);</span><br><span class="line">  assert(s.order_of_key(<span class="number">9999999</span>) == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存取效率都可以达到O(log(n))，不足就是程序重启后数据会丢失。还是对所有的用户积分，没必要。<br>而且是有依赖，不方便扩展，实现不了复杂的需求，</p><h3 id="方案四-实现排序树"><a href="#方案四-实现排序树" class="headerlink" title="方案四 实现排序树"></a>方案四 实现排序树</h3><p>大致实现思路如下：</p><p>　　我们可以把[0, 1,000,000)作为一级区间；再把一级区间分为两个2级区间[0, 500,000), [500,000, 1,000,000)，然后把二级区间二分为4个3级区间[0, 250,000), [250,000, 500,000), [500,000, 750,000), [750,000, 1,000,000)，依此类推，最终我们会得到1,000,000个21级区间[0,1), [1,2) … [999,999, 1,000,000)。这实际上是把区间组织成了一种平衡二叉树结构，根结点代表一级区间，每个非叶子结点有两个子结点，左子结点代表低分区间，右子结点代表高分区间。树形分区结构需要在更新时保持一种不变量，非叶子结点的count值总是等于其左右子结点的count值之和。</p><p>　　以后，每次用户积分有变化所需要更新的区间数量和积分变化量有关系，积分变化越小更新的区间层次越低。总体上，每次所需要更新的区间数量是用户积分变量的log(n)级别的，也就是说如果用户积分一次变化在百万级，更新区间的数量在二十这个级别。在这种树形分区积分表的辅助下查询积分为s的用户排名，实际上是一个在区间树上由上至下、由粗到细一步步明确s所在位置的过程。比如，对于积分499,000，我们用一个初值为0的排名变量来做累加；首先，它属于1级区间的左子树[0, 500,000)，那么该用户排名应该在右子树[500,000, 1,000,000)的用户数count之后，我们把该count值累加到该用户排名变量，进入下一级区间；其次，它属于3级区间的[250,000, 500,000)，这是2级区间的右子树，所以不用累加count到排名变量，直接进入下一级区间；再次，它属于4级区间的…；直到最后我们把用户积分精确定位在21级区间[499,000, 499,001)，整个累加过程完成，得出排名！</p><p>　　虽然，本算法的更新和查询都涉及到若干个操作，但如果我们为区间的from_score和to_score建立索引，这些操作都是基于键的查询和更新，不会产生表扫描，因此效率更高。另外，本算法并不依赖于关系数据模型和SQL运算，可以轻易地改造为NoSQL等其他存储方式，而基于键的操作也很容易引入缓存机制进一步优化性能。进一步，我们可以估算一下树形区间的数目大约为2,000,000，考虑每个结点的大小，整个结构只占用几十M空间。所以，我们完全可以在内存建立区间树结构，并通过user_score表在O(n)的时间内初始化区间树，然后排名的查询和更新操作都可以在内存进行。一般来讲，同样的算法，从数据库到内存算法的性能提升常常可以达到10^5以上；因此，本算法可以达到非常高的性能。</p><p>　　算法特点</p><p>　　优点：结构稳定，不受积分分布影响；每次查询或更新的复杂度为积分最大值的O(log(n))级别，且与用户规模无关，可以应对海量规模；不依赖于SQL，容易改造为NoSQL或内存数据结构。</p><p>　　缺点：算法相对更复杂。</p><h3 id="方案五-实现跳表排序"><a href="#方案五-实现跳表排序" class="headerlink" title="方案五 实现跳表排序"></a>方案五 实现跳表排序</h3><p>skip list是链表的一种特殊形式，对链表的一种优化；保证INSERT和REMOVE操作是O(logn)，而通用链表的复杂度为O(n);<br>优点：实现较简单，效率基本上O(log(N))<br>缺点：当达到亿级别时的数据时，性能会急剧下降</p><h3 id="方案六-利用redis特新实现"><a href="#方案六-利用redis特新实现" class="headerlink" title="方案六 利用redis特新实现"></a>方案六 利用redis特新实现</h3><p>其实redis底层还是使用跳表实现排序的，只是将接口都封装好了，使用接口也比较完善，稳定。</p><p>redis的zset天生是用来做排行榜的、好友列表, 去重, 历史记录等业务需求。接口使用非常简单。接口非常丰富，基本上需要的实现都能满足，说明如下：</p><p>ZAdd/ZRem是O(log(N))，ZRangeByScore/ZRemRangeByScore是O(log(N)+M)，N是Set大小，M是结果/操作元素的个数。</p><p>ZSET的实现用到了两个数据结构：hash table 和 skip list(跳跃表)，其中hash table是具体使用redis中的dict来实现的，主要是为了保证查询效率为O(1) ，而skip list(跳跃表)主要是保证元素有序并能够保证INSERT和REMOVE操作是O(logn)的复杂度。</p><p>优点：基于redis开发，速度快；使用redis相关特性</p><p>缺点：当达到亿级别时的数据时，性能会急剧下降</p><p>来实现排行榜的方法很多，可以根据自己的具体需求，参考选用。</p><h2 id="方案七-其实只需要TopN的排名，大于N的排名并不需要精确排名计算"><a href="#方案七-其实只需要TopN的排名，大于N的排名并不需要精确排名计算" class="headerlink" title="方案七 其实只需要TopN的排名，大于N的排名并不需要精确排名计算"></a>方案七 其实只需要TopN的排名，大于N的排名并不需要精确排名计算</h2><p>基于此，假设我们游戏内只需要排前100名，这里我们只需要维护一个100大小的数组</p><ol><li>当元素A需要参与排序的时候，与数组中最小的积分进行比较，如果能进100名，那么将第100剔除，将A加入，并记录最小元素，这样就完成了积分上涨的情况</li><li>还有一种就是已经在前100名中元素的积分发生变化下降，那么需要在前100名后找出可以进排行榜的元素，这种情况比较麻烦，可以使用最大堆保存剩下所有用户的数据，当需要找出能替换进入排行榜的元素就非常快logn，选择特定数据结构非常重要</li><li>既然大于N的用户不需要精确排名，那么怎么样估算大概排名呢？一般做法是按照数值区间建立所若干个桶，比如我们预计要排名的那一个数据的最大值能到1W。我建立0-10， 10-100，100-1000， 1000-2000， 2000-5000， 5000-10000 这样6个桶，每个桶里面记录分值在这个桶对应的区间内，有多少个玩家。 比如<br>0-10， 10人<br>10-100，20人<br>100-1000，30人<br>1000-2000， 40人<br>2000-5000， 50人<br>5000-10000， 60人<br>那么如果一个玩家 是 1234分，那么他的排名就超过了 （10 + 20 + 30）/ （10 + 20 + 30 + 40 + 50 + 60）这个百分比的玩家（所以桶分的越细，后面的排名越精确）<br>实质就是按照分区间记录区间内元素个数，从而估算大概排名，因此数值区间越小，估算约精确。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求背景&quot;&gt;&lt;a href=&quot;#需求背景&quot; class=&quot;headerlink&quot; title=&quot;需求背景&quot;&gt;&lt;/a&gt;需求背景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;查看TopN的用户排名&lt;/li&gt;
&lt;li&gt;查看自己的排名&lt;/li&gt;
&lt;li&gt;用户积分变更后，排名及时更新&lt;/li</summary>
      
    
    
    
    <category term="Game" scheme="https://blog.genge.cc/categories/Game/"/>
    
    
    <category term="rank" scheme="https://blog.genge.cc/tags/rank/"/>
    
  </entry>
  
  <entry>
    <title>Timer 定时器技术分享</title>
    <link href="https://blog.genge.cc/2020/01/23/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%97%B6%E9%97%B4%E8%BD%AETimer%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>https://blog.genge.cc/2020/01/23/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%97%B6%E9%97%B4%E8%BD%AETimer%E5%AE%9A%E6%97%B6%E5%99%A8/</id>
    <published>2020-01-23T07:12:45.000Z</published>
    <updated>2020-07-21T13:52:02.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说点废话"><a href="#说点废话" class="headerlink" title="说点废话"></a>说点废话</h2><blockquote><p>不管是客户端<code>Client</code>还是服务器<code>Server</code>，不论你是从事游戏行业还是互联网行业，在技术上总会涉及到定时器。虽然有的框架系统已经帮你实现，并且提供完美API供你使用，但你真的了解定时器吗？我们不仅要知道如何使用正确的Timer，还得明白定时器的实现原理，要知其所以然。  </p></blockquote><h2 id="理解定时器"><a href="#理解定时器" class="headerlink" title="理解定时器"></a>理解定时器</h2><p>使用者角度分类：</p><ol><li><p>周期性定时器</p><ol><li>使用 <code>TCP</code> 长连接时，客户端需要定时向服务端发送心跳请求</li><li>游戏内系统每日重置功能</li><li>体力回复</li><li>….</li></ol></li><li><p>非周期性定时器</p><ol><li>玩法活动定时开启、关闭</li><li>…</li></ol></li></ol><p><strong>当然，大部分非周期性定时器都可以使用周期性定时器实现，即执行一次后立即调用Remove接口即可</strong></p><p>定时器像水和空气一般，普遍存在于各个场景中，一般定时任务的形式表现为：经过固定时间后触发、按照固定频率周期性触发、在某个时刻触发。定时器是什么？可以理解为这样一个数据结构：<strong>存储一系列的任务集合，并且 <code>Deadline</code> 越接近的任务，拥有越高的执行优先级</strong></p><p>支持以下几种操作：</p><ol><li><code>Add New TimerTask</code> 添加新的定时器</li><li><code>Kill Or Remove TimerTask</code> 取消或者移除既有定时器任务</li><li><code>Run</code> 执行</li></ol><p>判断一个<code>TimerTask</code>是否到期，基本会采用轮询的方式，每隔一个<strong>时间片</strong><code>tickDuration</code>去检查最近的任务是否到期。</p><blockquote><p><strong>说到底，定时器还是靠线程轮询实现的。</strong></p></blockquote><p>现在知道<code>Timer</code>是靠轮询来实现的，那么中间应该采用那种数据结构呢？采用不同的数据结构实现，其性能也大不一样！<br>现在主要有如下几种：<code>List</code>链表、<code>Heap</code>最小堆、时间轮、分级时间轮，其中时间轮的实质为Hash表。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="双向有序链表"><a href="#双向有序链表" class="headerlink" title="双向有序链表"></a>双向有序链表</h3><p><code>AddTimer O(N)</code>很容易理解，按照 <code>expireTime</code> 查找合适的位置即可；<code>KillTimer O(1)</code> ，任务在 <code>Kill</code> 时，会持有自己节点的引用，所以不需要查找其在链表中所在的位置，即可实现当前节点的删除;<code>RunTimer O(1)</code>，由于整个双向链表是基于 expireTime 有序的，所以调度器只需要轮询第一个任务即可。</p><h3 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h3><p>最小堆指的是满足除了根节点以外的每个节点都不小于其父节点的堆。这样，堆中的最小值就存放在根节点中，并且在以某个结点为根的子树中，各节点的值都不小于该子树根节点的值。一个最小堆的例子如下图：<br><img src="https://www.ibm.com/developerworks/cn/linux/l-cn-timers/image002.jpg" alt="最小堆"></p><p>明显的，最小堆添加新元素或者删除节点效率为<code>O(lgn)</code>, <code>root</code>节点<code>expireTime</code>最小，执行优先级最高，因此复杂度为O(1)</p><p><strong>如果程序中的定时器数量比较少，基于最小堆的定时器一般可以满足需求，且实现简单。</strong></p><h3 id="时间轮"><a href="#时间轮" class="headerlink" title="时间轮"></a>时间轮</h3><p>时间轮的实质为哈希环<code>HashTable</code>,每个定时器任务根据对其<code>expireTime</code>哈希，得到对应的位置<code>index</code>，复杂度为<code>O(1)</code><br><img src="http://kirito.iocoder.cn/201807171109599678a80c-075a-40ee-b25f-10fd82c1025c.png" alt="时间轮"></p><p><strong>性能比较：</strong><br>| 实现方式 |    AddTimer    | KillTimer     | RunTimer|<br>|——– |————| ———–| ———–|<br>| 基于链表  |    O(1)    | O(n)    | O(n)|<br>|基于排序链表    |O(n)    |O(1)    |O(1)|<br>|基于最小堆     |    O(lgn)|    O(lgn)|    O(1)|<br>|基于时间轮    |O(1)    |O(1)    |O(1)|</p><p><em>现在看起来我们选择时间轮来实现就行了，是否这样就完事了？</em></p><h2 id="着重分析时间轮"><a href="#着重分析时间轮" class="headerlink" title="着重分析时间轮"></a>着重分析时间轮</h2><p>如果需要支持的定时器范围非常的大，上面的实现方式则不能满足这样的需求。因为这样将消耗非常可观的内存，假设需要表示的定时器范围为：0 – 2^3-1ticks，则简单时间轮需要 2^32 个元素空间，这对于内存空间的使用将非常的庞大。也许可以降低定时器的精度，使得每个 Tick 表示的时间更长一些，但这样的代价是定时器的精度将大打折扣。</p><p>现在的问题是，度量定时器的粒度，只能使用唯一粒度吗？想想日常生活中常遇到的水表，如下图：<br><img src="https://www.ibm.com/developerworks/cn/linux/l-cn-timers/image004.jpg" alt="水表"></p><p>钟表：<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1556440651&di=0c604969bfdf6b335dd78462f862743e&imgtype=jpg&er=1&src=http%3A%2F%2Famuseum.cdstm.cn%2FAMuseum%2Ftime%2F01gzsj%2Fimages%2F0102_b.jpg" alt="水表"></p><p>分级时间轮同样如此，每级时间轮所代表的粒度精度都不一样，这样结合起来，既能够保证定时器的精度，也能以较小内存代价表示范围更大更多的定时器。</p><p><strong>简单时间轮</strong>： 一个齿轮，每个齿轮保存一个超时的node链表。一个齿轮表示一个时间刻度，比如钟表里面一小格代表一秒，钟表的秒针每次跳一格。假设一个刻度代表10ms，则2^32 个格子可表示1.36年，2^16个格子可表示10.9分钟。当要表示的时间范围较大时，空间复杂度会大幅增加。</p><p><strong>分级时间轮</strong>： 类似于水表，当小轮子里的指针转动满一圈后，上一级轮子的指针进一格。  采用五个轮子每个轮子为一个简单时间轮，大小分别为 2^8， 2^6， 2^6， 2^6， 2^6，所需空间：2^8 + 2^6 + 2^6 + 2^6 + 2^6 = 512， 可表示的范围为 0  –  2^8 * 2^6 * 2^6* 2^6* 2^6 = 2^32 。</p><p><strong>分级时间轮简洁图</strong>：<br><img src="http://kirito.iocoder.cn/7f03c027b1de345a0b1e57239d73de74.png" alt="分级时间轮"></p><p><em>熟知的Linux系统内核，定时器实现方式就是分级时间轮</em><br><img src="https://images0.cnblogs.com/i/205989/201405/281755599318276.jpg" alt="Linux内核"></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>wheel_timer_mgr.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CWheelTimerModule</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITimerMgr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CWheelTimer</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;CWheelTimer*&gt; TListTimer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> ETimerType </span><br><span class="line">&#123; </span><br><span class="line">ETIMER_ONCE, </span><br><span class="line">ETIMER_CIRCLE </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">///定时器最小精度 1/10秒 （100毫秒）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span>  WHEEL_TIMER_MIN_PRECISION = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 基于分级的时间轮定时器, 精度约定为十分之一秒</span></span><br><span class="line"><span class="comment">* 注意，注册的Timer精度必须为约定的精度倍数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CWheelTimer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CWheelTimer();</span><br><span class="line">CWheelTimer(CWheelTimerModule&amp; oModule);</span><br><span class="line">~CWheelTimer();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 启动定时器</span></span><br><span class="line"><span class="comment">* @param nInterval: 传入的是毫秒, 约定必须是十分之一秒（100ms）的倍数</span></span><br><span class="line"><span class="comment">* @return </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">(ITimerMgr* pITimer, <span class="keyword">unsigned</span> <span class="keyword">int</span> nId, <span class="keyword">unsigned</span> nInterval, <span class="keyword">int</span> nDelay, ETimerType eTimerType = ETIMER_CIRCLE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 停止定时器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 定时器被触发</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTrigger</span><span class="params">(<span class="keyword">const</span> UINT64 nNow)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">CWheelTimerModule</span>;</span></span><br><span class="line"></span><br><span class="line">CWheelTimerModule&amp;m_oModule;</span><br><span class="line">ITimerMgr*m_pTimerMgr = <span class="literal">nullptr</span>;</span><br><span class="line">ETimerTypem_eTimerType;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>m_nTimerId = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>m_nInterval = <span class="number">-1</span>;    <span class="comment">//ms</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>m_llExpireTime = <span class="number">0</span>;  <span class="comment">//ms</span></span><br><span class="line"><span class="keyword">int</span>m_nVecIndex = <span class="number">0</span>;</span><br><span class="line">TListTimer::iteratorm_listIter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 定时器管理器接口， 派生类继承使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITimerMgr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span>  ~ITimerMgr();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">OnTimer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//interval 时间精度 ms</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">SetTimer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId, <span class="keyword">int</span> nInterval, <span class="keyword">int</span> nDelay = <span class="number">0</span>, ETimerType eTimeType = ETIMER_CIRCLE)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">KillTimer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span>  <span class="title">IsTimerExist</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId)</span></span>;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>, CWheelTimer*&gt; m_mapTimer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 全局定时器管理模块， 负责管理所有的定时器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CWheelTimerModule</span> :</span> <span class="keyword">public</span> Storm::TSingleton&lt;CWheelTimerModule&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Storm</span>:</span>:TSingleton&lt;CWheelTimerModule&gt;;</span><br><span class="line">CWheelTimerModule();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">AddTimer</span><span class="params">(CWheelTimer* pTimer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">RemoveTimer</span><span class="params">(CWheelTimer* pTimer)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 驱动所有的定时器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">Run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> UINT64<span class="title">GetCurMillisecs</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 修正精度 </span></span><br><span class="line"><span class="comment">* @param nSrcTime </span></span><br><span class="line"><span class="comment">* @return 传入的时间除以当前约定最小定时器精度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> UINT64<span class="title">HandlePrecision</span><span class="params">(<span class="keyword">const</span> UINT64 nSrcTime)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span>_Cascade(<span class="keyword">int</span> nOffset, <span class="keyword">int</span> nIndex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;TListTimer&gt;m_vecTimerList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//notice: precision=100ms not 1ms</span></span><br><span class="line">UINT64m_llCheckTime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @brief 定时器工厂 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTimerFactory</span>:</span> <span class="keyword">public</span> Storm::TSingleton&lt;CTimerFactory&gt;, <span class="keyword">public</span> CNoncopy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Storm</span>:</span>:TSingleton&lt;CTimerFactory&gt;;</span><br><span class="line">CTimerFactory();</span><br><span class="line"><span class="keyword">virtual</span>~CTimerFactory();</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function">CWheelTimer*<span class="title">CreateCTimer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span><span class="title">ReleaseCTimer</span><span class="params">(CWheelTimer* pTimer)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">CSTObjectPool&lt;CWheelTimer&gt;    m_oCTimerPool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wheel_timer_mgr.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TVN_BITS 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TVR_BITS 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TVN_SIZE (1 &lt;&lt; TVN_BITS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TVR_SIZE (1 &lt;&lt; TVR_BITS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TVN_MASK (TVN_SIZE - 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TVR_MASK (TVR_SIZE - 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET(N) (TVR_SIZE + (N) *TVN_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INDEX(V, N) ((V &gt;&gt; (TVR_BITS + (N) *TVN_BITS)) &amp; TVN_MASK)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> TVN_BITS = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> TVR_BITS = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> TVN_SIZE = (<span class="number">1</span> &lt;&lt; TVN_BITS);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> TVR_SIZE = (<span class="number">1</span> &lt;&lt; TVR_BITS);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> TVN_MASK = (TVN_SIZE - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> TVR_MASK = (TVR_SIZE - <span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OFFSET</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123; <span class="keyword">return</span> (TVR_SIZE + (N)*TVN_SIZE); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">INDEX</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> V, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((V &gt;&gt; (TVR_BITS + (N)*TVN_BITS)) &amp; TVN_MASK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CWheelTimer::CWheelTimer()</span><br><span class="line">:m_oModule(CWheelTimerModule::GetInstance())</span><br><span class="line">, m_nVecIndex(<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CWheelTimer::CWheelTimer(CWheelTimerModule&amp; oModule)</span><br><span class="line">: m_oModule(oModule)</span><br><span class="line">, m_nVecIndex(<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CWheelTimer::~CWheelTimer()</span><br><span class="line">&#123;</span><br><span class="line">Stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CWheelTimer::Start</span><span class="params">(ITimerMgr* pTimerMgr, <span class="keyword">unsigned</span> <span class="keyword">int</span> nId, <span class="keyword">unsigned</span> nInterval, <span class="keyword">int</span> nDelay, ETimerType eTimerType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stop();</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间都修正为最小精度</span></span><br><span class="line"><span class="keyword">if</span> (nInterval &lt; WHEEL_TIMER_MIN_PRECISION)</span><br><span class="line">&#123;</span><br><span class="line">nInterval = WHEEL_TIMER_MIN_PRECISION;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_nInterval = CWheelTimerModule::HandlePrecision(nInterval);</span><br><span class="line">m_eTimerType = eTimerType;</span><br><span class="line">m_pTimerMgr = pTimerMgr;</span><br><span class="line">m_nTimerId = nId;</span><br><span class="line">m_llExpireTime = CWheelTimerModule::HandlePrecision(nDelay + CWheelTimerModule::GetCurMillisecs());</span><br><span class="line">m_oModule.AddTimer(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CWheelTimer::Stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_nVecIndex != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_oModule.RemoveTimer(<span class="keyword">this</span>);</span><br><span class="line">m_nVecIndex = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CWheelTimer::OnTrigger</span><span class="params">(<span class="keyword">const</span> UINT64 nNow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_eTimerType == ETIMER_CIRCLE)</span><br><span class="line">&#123;</span><br><span class="line">m_llExpireTime = m_nInterval + nNow;</span><br><span class="line">m_oModule.AddTimer(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_nVecIndex = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_pTimerMgr != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_pTimerMgr-&gt;OnTimer(m_nTimerId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">CWheelTimerModule::CWheelTimerModule()</span><br><span class="line">&#123;</span><br><span class="line">m_vecTimerList.resize(TVR_SIZE + <span class="number">4</span> * TVN_SIZE);</span><br><span class="line">m_llCheckTime = HandlePrecision(GetCurMillisecs());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CWheelTimerModule::AddTimer</span><span class="params">(CWheelTimer* pTimer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UINT64 llExpireTime = pTimer-&gt;m_llExpireTime;</span><br><span class="line">INT64 llTimeDiff = pTimer-&gt;m_llExpireTime - m_llCheckTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (llTimeDiff &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pTimer-&gt;m_nVecIndex = m_llCheckTime &amp; TVR_MASK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (llTimeDiff &lt; TVR_SIZE)</span><br><span class="line">&#123;</span><br><span class="line">pTimer-&gt;m_nVecIndex = llExpireTime &amp; TVR_MASK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (llTimeDiff &lt; <span class="number">1</span> &lt;&lt; (TVR_BITS + TVN_BITS))</span><br><span class="line">&#123;</span><br><span class="line">pTimer-&gt;m_nVecIndex = OFFSET(<span class="number">0</span>) + INDEX(llExpireTime, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (llTimeDiff &lt; <span class="number">1</span> &lt;&lt; (TVR_BITS + <span class="number">2</span> * TVN_BITS))</span><br><span class="line">&#123;</span><br><span class="line">pTimer-&gt;m_nVecIndex = OFFSET(<span class="number">1</span>) + INDEX(llExpireTime, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (llTimeDiff &lt; <span class="number">1</span> &lt;&lt; (TVR_BITS + <span class="number">3</span> * TVN_BITS))</span><br><span class="line">&#123;</span><br><span class="line">pTimer-&gt;m_nVecIndex = OFFSET(<span class="number">2</span>) + INDEX(llExpireTime, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (llTimeDiff &gt; <span class="number">0xffffffff</span>UL)</span><br><span class="line">&#123;</span><br><span class="line">llTimeDiff = <span class="number">0xffffffff</span>UL;</span><br><span class="line">llExpireTime = llTimeDiff + m_llCheckTime;</span><br><span class="line">&#125;</span><br><span class="line">pTimer-&gt;m_nVecIndex = OFFSET(<span class="number">3</span>) + INDEX(llExpireTime, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TListTimer&amp; listTimer = m_vecTimerList[pTimer-&gt;m_nVecIndex];</span><br><span class="line">listTimer.push_back(pTimer);</span><br><span class="line">pTimer-&gt;m_listIter = listTimer.end();</span><br><span class="line">--pTimer-&gt;m_listIter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CWheelTimerModule::RemoveTimer</span><span class="params">(CWheelTimer* pTimer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TListTimer&amp; listTimer = m_vecTimerList[pTimer-&gt;m_nVecIndex];</span><br><span class="line">listTimer.erase(pTimer-&gt;m_listIter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CWheelTimerModule::Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UINT64 nNow = HandlePrecision(GetCurMillisecs());</span><br><span class="line"><span class="keyword">while</span> (m_llCheckTime &lt;= nNow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//for every tick</span></span><br><span class="line"><span class="keyword">int</span> index = m_llCheckTime &amp; TVR_MASK;</span><br><span class="line"><span class="keyword">if</span> (!index &amp;&amp;</span><br><span class="line">!_Cascade(OFFSET(<span class="number">0</span>), INDEX(m_llCheckTime, <span class="number">0</span>)) &amp;&amp;</span><br><span class="line">!_Cascade(OFFSET(<span class="number">1</span>), INDEX(m_llCheckTime, <span class="number">1</span>)) &amp;&amp;</span><br><span class="line">!_Cascade(OFFSET(<span class="number">2</span>), INDEX(m_llCheckTime, <span class="number">2</span>)))</span><br><span class="line">&#123;</span><br><span class="line">_Cascade(OFFSET(<span class="number">3</span>), INDEX(m_llCheckTime, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">++m_llCheckTime;</span><br><span class="line"></span><br><span class="line">TListTimer&amp; listTimer = m_vecTimerList[index];</span><br><span class="line">TListTimer listTmp;</span><br><span class="line">listTmp.splice(listTmp.end(), listTimer);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> itr = listTmp.begin(); itr != listTmp.end(); ++itr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span>* pTimer = *itr;</span><br><span class="line"><span class="keyword">if</span> (pTimer != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pTimer-&gt;OnTrigger(nNow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CWheelTimerModule::_Cascade(<span class="keyword">int</span> nOffset, <span class="keyword">int</span> nIndex)</span><br><span class="line">&#123;</span><br><span class="line">TListTimer&amp; listTimer = m_vecTimerList[nOffset + nIndex];</span><br><span class="line">TListTimer listTemp;</span><br><span class="line">listTemp.splice(listTemp.end(), listTimer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> itr = listTemp.begin(); itr != listTemp.end(); ++itr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span>* pTimer = *itr;</span><br><span class="line"><span class="keyword">if</span> (pTimer != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">AddTimer(pTimer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UINT64 <span class="title">CWheelTimerModule::HandlePrecision</span><span class="params">(<span class="keyword">const</span> UINT64 nSrcTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> nSrcTime / WHEEL_TIMER_MIN_PRECISION;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UINT64 <span class="title">CWheelTimerModule::GetCurMillisecs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> llCurTime = CSysTime::Instance()-&gt;GetNowMliTime();</span><br><span class="line"><span class="keyword">return</span> llCurTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITimerMgr::~ITimerMgr()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : m_mapTimer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it.second != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">it.second-&gt;Stop();</span><br><span class="line">CTimerFactory::Instance()-&gt;ReleaseCTimer(it.second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m_mapTimer.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ITimerMgr::SetTimer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId, <span class="keyword">int</span> nInterval, <span class="keyword">int</span> nDelay ,ETimerType eTimeType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (IsTimerExist(nId))</span><br><span class="line">&#123;</span><br><span class="line">EXLOG_DEBUG &lt;&lt; <span class="string">"[RyzTimer]Timer Has Existed, Not Repeat Add, nId:"</span> &lt;&lt; nId;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CWheelTimer* pTimer = CTimerFactory::Instance()-&gt;CreateCTimer();</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == pTimer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_mapTimer[nId] = pTimer;</span><br><span class="line">pTimer-&gt;Start(<span class="keyword">this</span>, nId, nInterval, nDelay, eTimeType);</span><br><span class="line">EXLOG_DEBUG &lt;&lt; <span class="string">"[RyzTimer]Add Timer nId:"</span> &lt;&lt; nId &lt;&lt; <span class="string">",nInterval:"</span> &lt;&lt; nInterval &lt;&lt; <span class="string">",nDelay:"</span> &lt;&lt; nDelay &lt;&lt; <span class="string">",eTimeType:"</span> &lt;&lt; eTimeType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ITimerMgr::KillTimer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> it = m_mapTimer.find(nId);</span><br><span class="line"><span class="keyword">if</span> (it != m_mapTimer.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 释放后 在TimerManager中 不会再执行 不需要做其他的操作</span></span><br><span class="line">it-&gt;second-&gt;Stop();</span><br><span class="line">CTimerFactory::Instance()-&gt;ReleaseCTimer(it-&gt;second);</span><br><span class="line">m_mapTimer.erase(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ITimerMgr::IsTimerExist</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> m_mapTimer.find(nId) != m_mapTimer.end(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CTimerFactory::CTimerFactory()</span><br><span class="line">&#123;</span><br><span class="line">m_oCTimerPool.Init(<span class="number">32</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CTimerFactory::~CTimerFactory()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CWheelTimer * <span class="title">CTimerFactory::CreateCTimer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CWheelTimer* pTimer = m_oCTimerPool.FetchObj();</span><br><span class="line"><span class="keyword">return</span> pTimer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CTimerFactory::ReleaseCTimer</span><span class="params">(CWheelTimer* pTimer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != pTimer)</span><br><span class="line">&#123;</span><br><span class="line">m_oCTimerPool.ReleaseObj(pTimer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说点废话&quot;&gt;&lt;a href=&quot;#说点废话&quot; class=&quot;headerlink&quot; title=&quot;说点废话&quot;&gt;&lt;/a&gt;说点废话&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不管是客户端&lt;code&gt;Client&lt;/code&gt;还是服务器&lt;code&gt;Server&lt;/code&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.genge.cc/categories/Linux/"/>
    
    
    <category term="timer" scheme="https://blog.genge.cc/tags/timer/"/>
    
  </entry>
  
  <entry>
    <title>linux fork函数详解</title>
    <link href="https://blog.genge.cc/2020/01/23/linux%20fork%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.genge.cc/2020/01/23/linux%20fork%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-01-23T07:12:45.000Z</published>
    <updated>2020-07-21T13:52:02.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数原型：-pid-t-fork-void"><a href="#函数原型：-pid-t-fork-void" class="headerlink" title="函数原型： pid_t    fork(void)"></a>函数原型： <code>pid_t    fork(void)</code></h3><ol><li>参数：不需要参数</li><li>需要的头文件<code>&lt;sys/types.h&gt;</code> 和 <code>&lt;unistd.h&gt;</code></li><li>返回值分两种情况：<ul><li>返回0表示成功创建子进程，并且接下来进入子进程执行流程</li><li>返回PID（&gt;0），成功创建子进程，并且继续执行父进程流程代码</li><li>返回非正数（&lt;0），创建子进程失败，失败原因主要有：<ul><li>进程数超过系统所能创建的上限，errno会被设置为EAGAIN</li><li>系统内存不足，errno会被设置为ENOMEM</li></ul></li></ul></li></ol><h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><blockquote><p>使用 fork() 函数得到的子进程是父进程的一个复制品，它从父进程处继承了整个进程的地址空间：包括进程上下文（进程执行活动全过程的静态描述）、进程堆栈、打开的文件描述符、信号控制设定、进程优先级、进程组号等。<strong>子进程所独有的只有它的进程号，计时器等（只有小量信息）</strong>。因此，使用 fork() 函数的代价是很大的。</p></blockquote><h3 id="共享方式"><a href="#共享方式" class="headerlink" title="共享方式"></a>共享方式</h3><blockquote><p>实际上，更准确来说，Linux 的 fork() 使用是通过<strong>写时拷贝</strong> (copy- on-write) 实现。写时拷贝是一种可以推迟甚至避免拷贝数据的技术。内核此时并不复制整个进程的地址空间，而是让父子进程共享同一个地址空间。只用在需要写入的时候才会复制地址空间，从而使各个进行拥有各自的地址空间。也就是说，资源的复制是在需要写入的时候才会进行，在此之前，只有以只读方式共享。 </p></blockquote><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><blockquote><p> 创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程执行没有固定的先后顺序，哪个进程先执行要看系统的进程调度策略。</p></blockquote><blockquote><p>linux有个类似的函数vfork()：函数表面看起来都一样，但是它保证子进程先运行,在它调用 exec（进程替换） 或 exit（退出进程）之后父进程才可能被调度运行。子进程共享父进程的地址空间（准确来说，在调用 exec（进程替换） 或 exit（退出进程） 之前与父进程数据是共享的）， vfork() 创建的子进程会执行完后，才到父进程执行。</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>子进程与父进程的区别在于：</p><ol><li>除了文件锁以外,其他的锁都会被继承</li><li>各自的进程ID和父进程ID不同</li><li>子进程的未决告警被清除；</li><li>子进程的未决信号集设置为空集。</li></ol><h3 id="孤儿进程、僵尸进程"><a href="#孤儿进程、僵尸进程" class="headerlink" title="孤儿进程、僵尸进程"></a>孤儿进程、僵尸进程</h3><blockquote><p>fork系统调用之后，父子进程将交替执行，执行顺序不定。如果父进程先退出，子进程还没退出那么子进程的父进程将变为init进程（托孤给了init进程）。（注：任何一个进程都必须有父进程）如果子进程先退出，父进程还没退出，那么子进程必须等到父进程捕获到了子进程的退出状态才真正结束，否则这个时候子进程就成为僵进程（僵尸进程：只保留一些退出信息供父进程查询）</p></blockquote><h3 id="多线程进程的Fork调用"><a href="#多线程进程的Fork调用" class="headerlink" title="多线程进程的Fork调用"></a>多线程进程的Fork调用</h3><p>坑大，面试可能会问道，工作中也要小心使用<br><a href="https://blog.codingnow.com/2011/01/fork_multi_thread.html" target="_blank" rel="noopener">云风 BLOG: 极不和谐的 fork 多线程程序</a><br>讲的主要是当前的进程processA (thread a/b/c)的当前子线程thread a调用fork后，会创建子进程，但是只是复制了thread a，总结一句就是所有父进程中别的线程，到了子进程中都是突然蒸发掉的。这样会导致各种死锁问题，以及各种数据不一致等问题。最好的办法是在多线程进程里不是用fork。如果非使用不可，尽量fork完毕后直接exec，不调用任何其他除了fork之外的函数。exec可以覆盖内存空间，可以解决所有关于锁的问题。<br>还有一些文章可以看看：</p><ol><li><a href="https://blog.csdn.net/Move_now/article/details/73537535" target="_blank" rel="noopener">谨防fork与锁之间的深坑 - CSDN博客</a> </li><li><a href="https://blog.csdn.net/lyh__521/article/details/45921515" target="_blank" rel="noopener">子进程继承父进程中互斥锁的讨论 - CSDN博客</a>  </li><li><a href="https://blog.csdn.net/u011878172/article/details/79438584" target="_blank" rel="noopener">在多线程中使用fork函数导致死锁，以及解决方案 - CSDN博客</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数原型：-pid-t-fork-void&quot;&gt;&lt;a href=&quot;#函数原型：-pid-t-fork-void&quot; class=&quot;headerlink&quot; title=&quot;函数原型： pid_t    fork(void)&quot;&gt;&lt;/a&gt;函数原型： &lt;code&gt;pid_t  </summary>
      
    
    
    
    <category term="C/C++" scheme="https://blog.genge.cc/categories/C-C/"/>
    
    
    <category term="linux" scheme="https://blog.genge.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>全局唯一ID生成算法优化</title>
    <link href="https://blog.genge.cc/2020/01/23/%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/"/>
    <id>https://blog.genge.cc/2020/01/23/%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96/</id>
    <published>2020-01-23T07:12:42.000Z</published>
    <updated>2020-07-21T13:52:02.555Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#前言">前言</a></li><li><a href="#Snowflake算法介绍">Snowflake算法介绍</a></li><li><a href="#SnowFlake算法优化">SnowFlake算法优化</a><ul><li><a href="#目前算法设计缺陷">目前算法设计缺陷</a></li><li><a href="#设计优化">设计优化</a></li></ul></li><li><a href="#是否这样就完美了呢？">是否这样就完美了呢？</a></li><li><a href="#Talk-is-cheap-show-you-the-code">Talk is cheap, show you the code</a></li><li><a href="#参考文章">参考文章</a></li></ul><!-- tocstop --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进程启动前，一般会给每个进程静态分配一个唯一标识ID(ServerID或者PipeID)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> SServerID</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UINT16</span> wPlatform = <span class="number">0</span>; <span class="comment">///&lt; Platform   平台id </span></span><br><span class="line"><span class="built_in">UINT16</span> wArea = <span class="number">0</span>;        <span class="comment">///&lt; Area       区服id</span></span><br><span class="line"><span class="built_in">UINT16</span> wType = <span class="number">0</span>;        <span class="comment">///&lt; Type       服务器App类型</span></span><br><span class="line"><span class="built_in">UINT16</span> wIndex = <span class="number">0</span>;       <span class="comment">///&lt; Index      服务器App编号索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每个Role/Item/Hero/Mail 等创建的时候都会创建一个UUID来唯一标识，其中Mail_Uuid还有趋势递增的需求</p><h2 id="Snowflake算法介绍"><a href="#Snowflake算法介绍" class="headerlink" title="Snowflake算法介绍"></a>Snowflake算法介绍</h2><p><em>SnowFlake分布式生成Id算法由Twitter开源</em></p><p>SnowFlake算法生成id的结果是一个64bit大小的UINT64整数，它的结构如下图：<br><img src=":storage%5C1a51b319-5d9b-40f9-a828-cfc88309cea2%5C4dbfceed.png" alt="snowflake uuid-64bit"></p><p>SnowFlake的优点:<br>    - 整体上按照时间自增排序<br>    - 整个分布式系统内不会产生ID碰撞(时间戳和自增序列以外的字段作区分), 并且效率较高(位运算),</p><p>SnowFlake每秒能够产生6.4万ID左右.(和5段位的配置位数有关)<br>UUID从高位到低位依次排列：</p><ul><li>第一段：39位, 当对于某一个时间点的时间戳差值（至少10年可用）</li><li>第二段：3 位, 平台platform或大区id，比如QQ Android/QQ IOS/Wechat IOS 等（8）</li><li>第三段：11位, 区服area id，对应的就是服务器小区的ID（2048）</li><li>第四段：5 位, 服务器APP实例id index（32), Notice：appid需要在area范围内唯一</li><li>第五段：6 位, 自增长id，也就是说在一个完整的毫秒时间内最多可以生成64个UUID</li></ul><h2 id="SnowFlake算法优化"><a href="#SnowFlake算法优化" class="headerlink" title="SnowFlake算法优化"></a>SnowFlake算法优化</h2><h3 id="目前算法设计缺陷"><a href="#目前算法设计缺陷" class="headerlink" title="目前算法设计缺陷"></a>目前算法设计缺陷</h3><p>在实际服务器运行过程中，尤其在游戏服务器开发期间，大量用户注册，会有瞬间生成大量UUID的需求</p><p>之前服务器的做法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历了一圈64个，等下一个毫秒生成</span></span><br><span class="line"><span class="keyword">if</span> (m_nGlobalSeq == m_nMliSeq)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 毫秒内序列溢出, 阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">nCurTimestamp = WaitForNextMilli(m_nLastTimestamp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">* @return 当前时间戳</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">UINT64 <span class="title">WaitForNextMilli</span><span class="params">(UINT64 lastTimestamp)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UINT64 nTimestamp = _GetNowMliTime();</span><br><span class="line"><span class="keyword">while</span> (nTimestamp &lt;= lastTimestamp)</span><br><span class="line">&#123;</span><br><span class="line">nTimestamp = _GetNowMliTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nTimestamp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用while强行等待到下一毫秒，相当于阻塞当前线程，从而成为热点函数，需要去优化</p><h3 id="设计优化"><a href="#设计优化" class="headerlink" title="设计优化"></a>设计优化</h3><ul><li>合理分配各字段占用bit（图中已经是调整过的）</li><li>将生成uuid单独出一个独立全局Server组件，提供全局唯一UUID服务，这样除去高位39bit外理论上其他bit都可以当作自增位，而且可以提前生成很多uuid放在pool当中，有需要的进程从当中取，可以满足需求，Baidu在github上开源的UUID生成算法就是这样处理的</li><li>我们取一个折中方案，只是在server中加一个Pool，存放提前生成好的UUIDs，每次业务端需要UUID的时候首先从Pool中取，如果取不到就走原来的流程</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT64 <span class="title">GenId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从Pool中取</span></span><br><span class="line"><span class="keyword">return</span> PopFrontElement();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NextId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然存在Pool，那么就需要设计Pool中元素填充方案<br>首先将Pool设定一个合适的固定最大值 const UINT32 UUID_POOL_MAX_SIZE = 1 &lt;&lt; 13;   //        uuid pool 最大数 8192<br>然后根据当前Pool的状态，来定时填充，每次填充的数量为当前毫秒内所有可以生成的UUID数<br><img src=":storage%5C1a51b319-5d9b-40f9-a828-cfc88309cea2%5C928daf4a.png" alt="Fill_Pool.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uuid_pool_mgr.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uuid_generator.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CUUIDPool::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FillUuidPool();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CUUIDPool::OnTimer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EXLOG_DEBUG &lt;&lt; <span class="string">"[RyzUuid]CUUIDPool::OnTimer Old EUuidPoolState : "</span> &lt;&lt; nId;</span><br><span class="line">CUUIDMaker::Instance()-&gt;FillPoolWithInMli();</span><br><span class="line">FillUuidPool();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CUUIDPool::FillUuidPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EUuidPoolState eUuidDequeState = CUUIDMaker::Instance()-&gt;GetUuidDequeState();</span><br><span class="line">uint32 nUpdateInterval = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">switch</span> (eUuidDequeState)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Empty:</span><br><span class="line">nUpdateInterval = <span class="number">1</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Not_Full_0_30_Per:</span><br><span class="line">nUpdateInterval = <span class="number">2</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Not_Full_30_70_Per:</span><br><span class="line">nUpdateInterval = <span class="number">3</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Not_Full_70_100_Per:</span><br><span class="line">nUpdateInterval = <span class="number">4</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Full:</span><br><span class="line">nUpdateInterval = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">nUpdateInterval = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXLOG_DEBUG &lt;&lt; <span class="string">"[RyzUuid]CUUIDPool::OnTimer Now EUuidPoolState : "</span> &lt;&lt; eUuidDequeState;</span><br><span class="line">SetTimer(eUuidDequeState, nUpdateInterval, nUpdateInterval, ETIMER_ONCE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> EUuidPoolState</span><br><span class="line">&#123;</span><br><span class="line">EUuidPoolState_Empty= <span class="number">1</span>,</span><br><span class="line">EUuidPoolState_Not_Full_0_30_Per= <span class="number">2</span>,</span><br><span class="line">EUuidPoolState_Not_Full_30_70_Per= <span class="number">3</span>,</span><br><span class="line">EUuidPoolState_Not_Full_70_100_Per= <span class="number">4</span>,</span><br><span class="line">EUuidPoolState_Full= <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//uuid_generator.h</span></span><br><span class="line"><span class="comment">//将当前毫秒内的UUID全部生成并存到Pool中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillPoolWithInMli</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EUuidPoolState nCurState = GetUuidDequeState();</span><br><span class="line">AtomicUInt64 nCurTimestamp = _GetNowMliTime();</span><br><span class="line"><span class="keyword">while</span> (nCurState != EUuidPoolState_Full)</span><br><span class="line">&#123;</span><br><span class="line">UINT64 nNextUUId = NextId(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (nNextUUId == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PushBackElement(nNextUUId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nCurTimestamp != _GetNowMliTime())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否这样就完美了呢？"><a href="#是否这样就完美了呢？" class="headerlink" title="是否这样就完美了呢？"></a>是否这样就完美了呢？</h2><p>并没有呢！！！<br>这个算法强制依赖时间递增，如果时间回拨怎么办？<br>目前的做法是直接throw new exception<br>分析时间回拨产生原因<br>第一：人物操作，在真实环境一般不会有那个傻逼干这种事情，所以基本可以排除。<br>第二：由于有些业务等需要，机器需要同步时间服务器（在这个过程中可能会存在时间回拨，查了下我们服务器一般在10ms以内（2小时同步一次））。 Ntp过程可能产生时间回拨。<br>第三：QA和策划测试过程中有需求怎么办？<br>解决办法：</p><ol><li>将uuid_generation独立出来给其他server提供服务</li><li>当回拨时间小于XXms，就等时间追上来之后继续生成。 (XXms对业务没有什么影响)</li><li>当时间大于XXms时间我们通过更换AppId位来来解决回拨问题。</li></ol><h2 id="Talk-is-cheap-show-you-the-code"><a href="#Talk-is-cheap-show-you-the-code" class="headerlink" title="Talk is cheap, show you the code"></a>Talk is cheap, show you the code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __UUID_GENERATOR_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __UUID_GENERATOR_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gnsingleton.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gntype.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gnpipe.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gntime.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"noncopy.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gnserverid.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> EUuidPoolState</span><br><span class="line">&#123;</span><br><span class="line">EUuidPoolState_Empty= <span class="number">1</span>,</span><br><span class="line">EUuidPoolState_Not_Full_0_30_Per= <span class="number">2</span>,</span><br><span class="line">EUuidPoolState_Not_Full_30_70_Per= <span class="number">3</span>,</span><br><span class="line">EUuidPoolState_Not_Full_70_100_Per= <span class="number">4</span>,</span><br><span class="line">EUuidPoolState_Full= <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define SNOWFLAKE_ID_MAKER_NO_LOCK</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSnowflakeIdMaker</span> :</span> <span class="keyword">private</span> CNoncopy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SNOWFLAKE_ID_MAKER_NO_LOCK</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::atomic&lt;UINT32&gt; AtomicUInt;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::atomic&lt;UINT64&gt; AtomicUInt64;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> UINT32 AtomicUInt;</span><br><span class="line"><span class="keyword">typedef</span> UINT64 AtomicUInt64;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UINT32 UUID_POOL_MAX_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">13</span>;   <span class="comment">//uuid pool 最大数 8192</span></span><br><span class="line"><span class="keyword">const</span> UINT64 START_EPOCH= <span class="number">1541001600000L</span>L;<span class="comment">//开始时间截 (2018-11-01 00:00:00.000)，修改此时间可调整可用时长</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> UINT32 A_TIMESTAMP_BITS= <span class="number">39</span>;<span class="comment">//时间戳所占的位数</span></span><br><span class="line"><span class="keyword">const</span> UINT32 B_PLATFORM_BITS= <span class="number">3</span>;<span class="comment">//平台id所占的位数</span></span><br><span class="line"><span class="keyword">const</span> UINT32 C_AREA_BITS= <span class="number">11</span>;<span class="comment">//区服id所占的位</span></span><br><span class="line"><span class="keyword">const</span> UINT32 D_APP_ID_BITS= <span class="number">5</span>;<span class="comment">//app id所占的位数</span></span><br><span class="line"><span class="keyword">const</span> UINT32 E_INCR_SEQUENCE_BITS= <span class="number">6</span>;    <span class="comment">//自增序列所占的位数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UINT32 APP_ID_SHIFT= E_INCR_SEQUENCE_BITS;<span class="comment">//APPID向左移位数</span></span><br><span class="line"><span class="keyword">const</span> UINT32 AREA_ID_SHIFT= E_INCR_SEQUENCE_BITS + D_APP_ID_BITS;<span class="comment">//小区id向左移位数</span></span><br><span class="line"><span class="keyword">const</span> UINT32 PLATFORM_ID_SHIFT= E_INCR_SEQUENCE_BITS + D_APP_ID_BITS + C_AREA_BITS;<span class="comment">//大区id向左移位数</span></span><br><span class="line"><span class="keyword">const</span> UINT32 TIME_STAMP_SHIFT= E_INCR_SEQUENCE_BITS + D_APP_ID_BITS + C_AREA_BITS + B_PLATFORM_BITS;<span class="comment">//时间戳向左移位数</span></span><br><span class="line"><span class="keyword">const</span> UINT32 SEQUENCE_MASK= (<span class="number">1</span> &lt;&lt; E_INCR_SEQUENCE_BITS) - <span class="number">1</span>;<span class="comment">//生成序列的掩码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSnowflakeIdMaker() : m_nPlatformId(<span class="number">0</span>), m_nAreaId(<span class="number">0</span>), m_nGlobalSeq(<span class="number">0</span>), m_nLastTimestamp(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">CSnowflakeIdMaker(<span class="keyword">const</span> UINT32 nPlatId, <span class="keyword">const</span> UINT32 nAreaId, <span class="keyword">const</span> UINT32 nAppId)</span><br><span class="line">&#123;</span><br><span class="line">Init(nPlatId, nAreaId, nAppId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> UINT32 nPlatId, <span class="keyword">const</span> UINT32 nAreaId, <span class="keyword">const</span> UINT32 nAppId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_nPlatformId = nPlatId;</span><br><span class="line">m_nAreaId = nAreaId;</span><br><span class="line">m_nAppId = nAppId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UINT64 <span class="title">GenId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> PopFrontElement();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NextId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">* @param  bCanBlock 参数指定当前函数是否可以阻塞, 默认为true</span></span><br><span class="line"><span class="comment">* @return SnowflakeId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">UINT64 <span class="title">NextId</span><span class="params">(<span class="keyword">bool</span> bCanBlock = <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SNOWFLAKE_ID_MAKER_NO_LOCK</span></span><br><span class="line"><span class="keyword">static</span> AtomicUInt64 nCurTimestamp&#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; oLock&#123; m_oMutex &#125;;</span><br><span class="line">AtomicUInt64 nCurTimestamp&#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">nCurTimestamp = _GetNowMliTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (nCurTimestamp &lt; m_nLastTimestamp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">ostringstream</span> oSS;</span><br><span class="line">oSS &lt;&lt; <span class="string">"clock moved backwards.  Refusing to generate id for "</span> &lt;&lt; m_nLastTimestamp - nCurTimestamp &lt;&lt; <span class="string">" milliseconds"</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="built_in">std</span>::runtime_error(oSS.str()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_nGlobalSeq = (m_nGlobalSeq + <span class="number">1</span>) &amp; SEQUENCE_MASK;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了使id递增+1均匀分布，这里seq跨毫秒也不清0</span></span><br><span class="line"><span class="keyword">if</span> (m_nLastTimestamp == nCurTimestamp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//遍历了一圈64个，等下一个毫秒生成</span></span><br><span class="line"><span class="keyword">if</span> (m_nGlobalSeq == m_nMliSeq)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bCanBlock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 毫秒内序列溢出, 阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">nCurTimestamp = WaitForNextMilli(m_nLastTimestamp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_nMliSeq = m_nGlobalSeq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SNOWFLAKE_ID_MAKER_NO_LOCK</span></span><br><span class="line">m_nLastTimestamp = nCurTimestamp.load();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">m_nLastTimestamp = nCurTimestamp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line"><span class="keyword">return</span> ((nCurTimestamp - START_EPOCH) &lt;&lt; TIME_STAMP_SHIFT)</span><br><span class="line">| (m_nPlatformId &lt;&lt; PLATFORM_ID_SHIFT)</span><br><span class="line">| (m_nAreaId &lt;&lt; AREA_ID_SHIFT)</span><br><span class="line">| (m_nAppId &lt;&lt; APP_ID_SHIFT)</span><br><span class="line">| (m_nGlobalSeq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">EUuidPoolState <span class="title">GetUuidDequeState</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_deUuidPool.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EUuidPoolState_Empty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> nCurPoolSize = m_deUuidPool.size();</span><br><span class="line"><span class="keyword">if</span> (nCurPoolSize &gt;= UUID_POOL_MAX_SIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EUuidPoolState_Full;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint32 nCurPercent = nCurPoolSize * <span class="number">100</span> / UUID_POOL_MAX_SIZE;</span><br><span class="line"><span class="keyword">if</span> (nCurPercent &lt; <span class="number">30</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EUuidPoolState_Not_Full_0_30_Per;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nCurPercent &lt; <span class="number">70</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EUuidPoolState_Not_Full_30_70_Per;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EUuidPoolState_Not_Full_70_100_Per;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EUuidPoolState_Full;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillPoolWithInMli</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EUuidPoolState nCurState = GetUuidDequeState();</span><br><span class="line">AtomicUInt64 nCurTimestamp = _GetNowMliTime();</span><br><span class="line"><span class="keyword">while</span> (nCurState != EUuidPoolState_Full)</span><br><span class="line">&#123;</span><br><span class="line">UINT64 nNextUUId = NextId(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (nNextUUId == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PushBackElement(nNextUUId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nCurTimestamp != _GetNowMliTime())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断pool是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_deUuidPool.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回pool队列中front 元素</span></span><br><span class="line"><span class="function">UINT64 <span class="title">PopFrontElement</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SNOWFLAKE_ID_MAKER_NO_LOCK</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; oLock&#123; m_oMutex &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">UINT64 nFrontElement = m_deUuidPool.front();</span><br><span class="line">m_deUuidPool.pop_front();</span><br><span class="line"><span class="keyword">return</span> nFrontElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushBackElement</span><span class="params">(UINT64 nNextUUId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SNOWFLAKE_ID_MAKER_NO_LOCK</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; oLock&#123; m_oMutex &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">m_deUuidPool.push_back(nNextUUId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @return 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">UINT64 _GetNowMliTime() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Storm::CSTDateTime oDateTime;</span><br><span class="line">oDateTime.Now();</span><br><span class="line"><span class="keyword">return</span> oDateTime.EpochMilliSecs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">auto</span> nTimeNow = chrono::system_clock::now();</span><br><span class="line"><span class="keyword">auto</span> nDurationInMs = chrono::duration_cast&lt;chrono::milliseconds&gt;(nTimeNow.time_since_epoch());</span><br><span class="line"><span class="keyword">return</span> nDurationInMs.count();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">* @return 当前时间戳</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">UINT64 <span class="title">WaitForNextMilli</span><span class="params">(UINT64 lastTimestamp)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UINT64 nTimestamp = _GetNowMliTime();</span><br><span class="line"><span class="keyword">while</span> (nTimestamp &lt;= lastTimestamp)</span><br><span class="line">&#123;</span><br><span class="line">nTimestamp = _GetNowMliTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nTimestamp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SNOWFLAKE_ID_MAKER_NO_LOCK</span></span><br><span class="line"><span class="built_in">std</span>::mutexm_oMutex;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">UINT32m_nPlatformId = <span class="number">0</span>;<span class="comment">//平台id</span></span><br><span class="line">UINT32m_nAreaId = <span class="number">0</span>;<span class="comment">//区服id</span></span><br><span class="line">UINT32m_nAppId = <span class="number">0</span>;<span class="comment">//Appid</span></span><br><span class="line">AtomicUIntm_nGlobalSeq&#123; <span class="number">0</span> &#125;;<span class="comment">//全局序列</span></span><br><span class="line">AtomicUIntm_nMliSeq&#123; <span class="number">0</span> &#125;;<span class="comment">//每毫秒序列</span></span><br><span class="line">AtomicUInt64m_nLastTimestamp&#123; <span class="number">0</span> &#125;;<span class="comment">//上次生成ID的时间截</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">deque</span>&lt;UINT64&gt; m_deUuidPool;<span class="comment">//uuid池 用于存放预生成uuids</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/* 负责生成全局唯一id*/</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CUUIDMaker</span> :</span> <span class="keyword">public</span> Storm::TSingleton&lt;CUUIDMaker&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Storm</span>:</span>:TSingleton&lt;CUUIDMaker&gt;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> UINT32 nParaA, <span class="keyword">const</span> UINT32 nParaB, <span class="keyword">const</span> UINT32 nParaC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_oIdMaker.Init(nParaA, nParaB, nParaC);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// init with pipeid</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> UINT64 nPipeId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Storm;</span><br><span class="line"><span class="function">CServerID <span class="title">oServID</span><span class="params">(nPipeId)</span></span>;</span><br><span class="line">m_oIdMaker.Init(oServID.GetPlat(), oServID.GetArea(), oServID.GetIndex());</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UINT64 <span class="title">GenId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_oIdMaker.GenId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">EUuidPoolState <span class="title">GetUuidDequeState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_oIdMaker.GetUuidDequeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillPoolWithInMli</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_oIdMaker.FillPoolWithInMli();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UINT64 <span class="title">GetCompareIdFromTime</span><span class="params">(UINT32 nTimeVal)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">UINT64 <span class="title">GetTimeAddVal</span><span class="params">(UINT32 nTimeVal)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">UINT32 <span class="title">GetTimeValFromUuid</span><span class="params">(UINT64 nUuid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">CSnowflakeIdMakerm_oIdMaker;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  GEN_GLOBAL_UUID()  CUUIDMaker::Instance()-&gt;GenId()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//gameserver </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uuid_pool_mgr.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uuid_generator.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CUUIDPool::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FillUuidPool();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CUUIDPool::OnTimer</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EXLOG_DEBUG &lt;&lt; <span class="string">"[RyzUuid]CUUIDPool::OnTimer Old EUuidPoolState : "</span> &lt;&lt; nId;</span><br><span class="line">CUUIDMaker::Instance()-&gt;FillPoolWithInMli();</span><br><span class="line">FillUuidPool();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CUUIDPool::FillUuidPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EUuidPoolState eUuidDequeState = CUUIDMaker::Instance()-&gt;GetUuidDequeState();</span><br><span class="line">uint32 nUpdateInterval = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">switch</span> (eUuidDequeState)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Empty:</span><br><span class="line">nUpdateInterval = <span class="number">1</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Not_Full_0_30_Per:</span><br><span class="line">nUpdateInterval = <span class="number">2</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Not_Full_30_70_Per:</span><br><span class="line">nUpdateInterval = <span class="number">3</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Not_Full_70_100_Per:</span><br><span class="line">nUpdateInterval = <span class="number">4</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EUuidPoolState_Full:</span><br><span class="line">nUpdateInterval = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">nUpdateInterval = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXLOG_DEBUG &lt;&lt; <span class="string">"[RyzUuid]CUUIDPool::OnTimer Now EUuidPoolState : "</span> &lt;&lt; eUuidDequeState;</span><br><span class="line">SetTimer(eUuidDequeState, nUpdateInterval, nUpdateInterval, ETIMER_ONCE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://juejin.im/post/5a7f9176f265da4e721c73a8" target="_blank" rel="noopener">分布式唯一id：snowflake算法思考 - 掘金</a><br><a href="https://tech.meituan.com/MT_Leaf.html" target="_blank" rel="noopener">https://tech.meituan.com/2017/04/21/mt-leaf.html</a><br><a href="https://github.com/baidu/uid-generator" target="_blank" rel="noopener">GitHub - baidu/uid-generator: UniqueID generator</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Snowflake算法介绍&quot;&gt;Snowflake算法介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SnowFlake算法优化&quot;&gt;SnowFlake算</summary>
      
    
    
    
    <category term="C/C++" scheme="https://blog.genge.cc/categories/C-C/"/>
    
    
    <category term="uuid" scheme="https://blog.genge.cc/tags/uuid/"/>
    
  </entry>
  
  <entry>
    <title>linux 系统信号和中断常识</title>
    <link href="https://blog.genge.cc/2020/01/23/linux%20%E7%B3%BB%E7%BB%9F%E4%BF%A1%E5%8F%B7%E5%92%8C%E4%B8%AD%E6%96%AD%E5%B8%B8%E8%AF%86/"/>
    <id>https://blog.genge.cc/2020/01/23/linux%20%E7%B3%BB%E7%BB%9F%E4%BF%A1%E5%8F%B7%E5%92%8C%E4%B8%AD%E6%96%AD%E5%B8%B8%E8%AF%86/</id>
    <published>2020-01-23T07:12:40.000Z</published>
    <updated>2020-07-21T13:52:02.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是中断"><a href="#什么是中断" class="headerlink" title="什么是中断"></a>什么是中断</h3><ol><li><p>中断基本概念</p><blockquote><p>中断是指计算机在执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序，待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。引起中断发生的事件被称为中断源。中断源向CPU发出的请求中断处理信号称为中断请求，而CPU收到中断请求后转到相应的事件处理程序称为中断响应。<br>在有些情况下，尽管产生了中断源和发出了中断请求，但CPU内部的处理器状态、字PSW的中断允许位已被清除，从而不允许CPU响应中断。这种情况称为禁止中断。CPU禁止中断后只有等到PSW的中断允许位被重新设置后才能接收中断。禁止中断也称为关中断，PSW的中断允许位的设置也被称为开中断。开中断和关中断是为了保证某段程序执行的原子性。<br>还有一个比较常用的概念是中断屏蔽。中断屏蔽是指在中断请求产生之后，系统有选择地封锁一部分中断而允许另一部分中断仍能得到响应。不过，有些中断请求是不能屏蔽甚至不能禁止的，也就是说，这些中断具有最高优先级，只要这些中断请求一旦提出，CPU必须立即响应。例如，电源掉电事件所引起的中断就是不可禁止和不可屏蔽的。</p></blockquote></li><li><p>中断分类与等级</p><blockquote><p>根据系统对中断处理的需要，操作系统一般对中断进行分类并对不同的中断赋予不同的处理优先级，以便在不同的中断同时发生时，按轻重缓急进行处理。<br>根据中断源产生的条件，可把中断分为外中断和内中断。外中断是指来自处理器和内存外部的中断，包括I／0设备发出的I／O中断、外部信号中断(例如用户键人ESC键)。各种定时器引起的时钟中断以及调试程序中设置的断点等引起的调试中断等。外中断在狭义上一般被称为中断。<br>内中断主要指在处理器和内存内部产生的中断。内中断一般称为陷阱(trap)或异常。它包括程序运算引起的各种错误，如地址非法、校验错、页面失效、存取访问控制错、算术操作溢出、数据格式非法、除数为零、非法指令、用户程序执行特权指令、分时系统中的时间片中断以及从用户态到核心态的切换等都是陷阱的例子。<br>为了按中断源的轻重缓急处理响应中断，操作系统为不同的中断赋予不同的优先级。例如在UNIX系统中，外中断和陷阱的优先级共分为8级。为了禁止中断或屏蔽中断，CPU的处理器状态字PSW中也设有相应的优先级。如果中断源的优先级高于PSW的优先级，则CPU响应该中断源的请求；反之，CPU屏蔽该中断源的中断请求。<br>各中断源的优先级在系统设计时给定，在系统运行时是固定的。而处理器的优先级则根据执行情况由系统程序动态设定。<br>除了在优先级的设置方面有区别之外，中断和陷阱还有如下主要区别：<br>陷阱通常由处理器正在执行的现行指令引起，而中断则是由与现行指令无关的中断源引起的。陷阱处理程序提供的服务为当前进程所用，而中断处理程序提供的服务则不是为了当前进程的。<br>CPU执行完一条指令之后，下一条指令开始之前响应中断，而在一条指令执行中也可以响应陷阱。例如执行指令非法时，尽管被执行的非法指令不能执行结束，但CPU仍可对其进行处理。</p></blockquote></li><li><p>软中断</p><blockquote><p>软中断的概念主要来源于UNIX系统。软中断是对应于硬中断而言的。通过硬件产生相应的中断请求，称为硬中断。而软中断则不然，它是在通信进程之间通过模拟硬中断而实现的一种通信方式。中断源发出软中断信号后，CPU或者接收进程在“适当的时机”进行中断处理或者完成软中断信号所对应的功能。这里“适当的时机”，表示接收软中断信号的进程须等到该接收进程得到处理器之后才能进行。如果该接收进程是占据处理器的，那么，该接收进程在接收到软中断信号后将立即转去执行该软中断信号所对应的功能。</p></blockquote></li><li><p>中断处理过程<br>一旦CPU响应中断，转人中断处理程序，系统就开始进行中断处理。下面对中断处理过程进行详细说明：</p><ol><li><p>CPU检查响应中断的条件是否满足。CPU响应中断的条件是：有来自于中断源的中断请求、CPU允许中断。如果中断响应条件不满足，则中断处理无法进行。</p></li><li><p>如果CPU响应中断，则CPU关中断，使其进入不可再次响应中断的状态。</p></li><li><p>保存被中断进程现场。为了在中断处理结束后能使进程正确地返回到中断点，系统必须保存当前处理器状态字PSW和程序计数器PC等的值。这些值一般保存在特定堆栈或硬件寄存器中。</p></li><li><p>分析中断原因，调用中断处理子程序。在多个中断请求同时发生时，处理优先级最高的中断源发出的中断请求。在系统中，为了处理上的方便，通常都是针对不同的中断源编制有不同的中断处理子程序(陷阱处理子程序)。这些子程序的人口地址(或陷阱指令的人口地址)存放在内存的特定单元中。再者，不同的中断源也对应着不同的处理器状态字PSW。这些不同的PSW被放在相应的内存单元中，与中断处理子程序人口地址一起构成中断向量。显然，根据中断或陷阱的种类，系统可由中断向量表迅速地找到该中断响应的优先级、中断处理子程序(或陷阱指令)的入口地址和对应的PSW。</p></li><li><p>执行中断处理子程序。对陷阱来说，在有些系统中则是通过陷阱指令向当前执行进程发出软中断信号后调用对应的处理子程序执行。</p></li><li><p>退出中断，恢复被中断进程的现场或调度新进程占据处理器。</p></li><li><p>开中断，CPU继续执行。</p></li></ol></li><li><p>设备管理程序与中断方式</p><blockquote><p>处理器的高速和输入输出设备低速之间的矛盾，是设备管理要解决的一个重要问题。为了提高整体效率，减少在程序直接控制方式中的CPU等待时间以及提高系统的并行工作效率，采用中断方式来控制输入输出设备和内存与CPU之间的数据传送，是很有必要的。在硬件结构上，这种方式要求CPU与输入输出设备(或控制器)之间有相应的中断请求线，而且在输入输出设备控制器的控制状态寄存器上有相应的中断允许位。</p></blockquote></li></ol><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>信号驱动的异步I/O是指一旦设备准备好，就主动通知应用程序，这种情况下应用程序就不需要查询设备状态。异步 I/O 和硬件上常提的中断的概念类似，信号是在软件层次上对中断机制的一种模拟。</p><ol><li><p>信号通信机制<br>软中断信号（signal，又简称为信号）是进程间通信机制中唯一的异步通信机制，一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号到底什么时候到达。<br>进程之间可以互相通过系统调用kill发送软中断信号，内核也可以因为内部事件而给进程发送信号，通知进程发生了某个事件。信号机制除了基本通知功能外，还可以传递附加信息。</p></li><li><p>处理信号<br>收到信号的进程对各种信号有不同的处理方法，主要分为以下三类：</p><ul><li>类似中断的处理程序，对于需要处理的信号，进程可以指定处理函数，由该函数来处理。进程通过系统调用signal来指定进程对某个信号的处理行为。</li><li>忽略某个信号，对该信号不做任何处理，就象未发生过一样。</li><li>对该信号的处理保留系统的默认值，对大部分的信号的缺省操作是使得进程终止。</li></ul></li></ol><p>需要注意的是，信号处理函数注册后，当信号来临并被触发调用信号处理函数，当同样类型信号再次到来时，并不会执行信号处理函数，而是使用信号的系统默认处理方式，大部分都是使得进程终止。</p><ol start="3"><li><p>信号可靠性<br>从可靠性方面信号分为可靠信号与不可靠信号；信号的可靠与不可靠只与信号值有关，与信号的发送及安装函数无关。信号值位于 SIGRTMIN 和 SIGRTMAX 之间的信号都是可靠信号，可靠信号克服了信号可能丢失的问题。<br>非实时信号都不支持排队，都是不可靠信号；实时信号都支持排队，都是可靠信号。<br>不可靠信号就是指发送的信号内核不一定能够发送给 目标进程，信号可能丢失。 不可靠信号在内核中存储的方式是位图和链表，当内核接收一个信号后，先判断它是否 已经存在，不存在就把他对应的位置一，并将信号挂入链表，存在则丢弃信号。 可靠信号则是把信号放入队列，再链入链表，所以也就保证了信号不丢失。<br>非可靠信号一般都有确定的用途及含义,  可靠信号则可以让用户自定义使用<br>需要注意的是：这里的“实时”和实时操作系统中的“实时”没有任何联系，实时信号在处理速度上并不会比普通信号快，它们之间的区别就是：普通信号会对多次的同一个信号进行“合并”处理，而实时信号会一一处理。这就要求我们在编写信号监听函数时，要捕获普通信号，必须时刻轮训监听，因为系统默认会丢弃同种类型的普通信号！</p></li><li><p>信号传递顺序<br>如果存在多个未决信号，同一个未决信号会按照发送顺序来递送信号，不同的未决信 号按照信号的序号大小来递送，序号小的信号会先被递送到进程。另外，linux中会优 先递送不可靠信号<br>Linux中的信号机制优先级是：高优先级中断-&gt;低优先级中断-&gt;软中断-&gt;信号-&gt;进程运行。<br>需要注意的是，在用户态不存在未决信号。信号处理一般发生在进程从内核态返回用户态的时候。内核空间没有信号处理机制，内核态也不会处理信号否者信号拥有系统最高权限，变得不再安全</p></li><li><p>多线程中信号造成死锁<br>如果一个线程持有锁，在操作临界区内容时，被信号中断了，转而去执行信号处理函数， 而信号处理函数再次对临界区加锁就会造成死锁。<br>解决的方法就是使用信号等待函数，线程阻塞等待信号处理函数直到处理完毕，也就是 所说的化异步为同步。</p></li><li><p>信号响应过程<br> 1) A进程调用信号发送函数，发送信号给B，这是软中断，所以A进程会进入内核态运行操作系统的信号调度代码<br> 2) 操作系统发现B进程正在运行，于是写入管理B进程的某个数据结构<br> 3) 操作系统返回给A，A继续执行<br> 4) B进程分配的处理器时间用完了，被时钟硬件中断<br> 5) 操作系统的时钟硬件中断处理函数准备挂起B进程，也就是把寄存器和函数堆栈保存起来，发现B进程收到了singal<br> 6) 操作系统在保存好B进程的stack和register后，新开stack(为了不干扰B进程真正的代码stack），激活B进程，B进程的信号处理函数。</p></li><li><p>信号生命周期（和响应过程类似）</p><ul><li>在目的进程中安装该信号。即设置捕获该信号时进程执行的操作，采用signal 或者 sigaction 系统调用来实现。</li><li>信号被某个进程产生，同时设置该信号的目的进程（使用pid），之后交给操作系统进行管理。采用kill()、arise()、alarm()等系统调用来实现。</li><li>信号在目的进程被注册。就是把信号值加入到进程的PCB（task_struct）中相关的数据结构里——未决信号的数据成员，信号携带的其他信息被保留到未决信的队列的某个sigqueue结构中。</li><li>信号在进程中注销。在执行信号处理函数前，要把信号在进程中注销。</li><li>信号生命的终结。进程终止当前的工作，保护上下文，执行信号处理函数，之后恢复。</li></ul></li><li><p>信号阻塞集(屏蔽集、掩码)<br>信号阻塞集也称信号屏蔽集、信号掩码。每个进程都有一个阻塞集，创建子进程时子进程将继承父进程的阻塞集。信号阻塞集用来描述哪些信号递送到该进程的时候被阻塞（在信号发生时记住它，直到进程准备好时再将信号通知进程）。<br>所谓阻塞并不是禁止传送信号, 而是暂缓信号的传送。若将被阻塞的信号从信号阻塞集中删除，且对应的信号在被阻塞时发生了，进程将会收到相应的信号。</p></li></ol><h3 id="信号实现机制"><a href="#信号实现机制" class="headerlink" title="信号实现机制"></a>信号实现机制</h3><ol><li>发送信号<br>内核给一个进程发送软中断信号的方法，是在进程所在的进程表项的信号域设置对应于该信号的位。如果信号发送给一个正在睡眠的进程，那么要看该进程进入睡眠的优先级，如果进程睡眠在可被中断的优先级上，则唤醒进程；否则仅设置进程表中信号域相应的位，而不唤醒进程。<br>进程的 PCB 中有关于本进程中未决信号的数据成员<code>struct sigpending pending</code>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigqueue</span> *<span class="title">head</span>, *<span class="title">tail</span>;</span></span><br><span class="line"><span class="keyword">sigset_t</span> signal;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>第三个成员是进程中所有未决信号集，第一、第二个成员分别指向一个sigqueue类型的结构链（称之为”未决信号信息链”）的首尾，信息链中的每个sigqueue结构刻画一个特定信号所携带的信息，并指向下一个sigqueue结构:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigqueue</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigqueue</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">siginfo_t</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信号在进程中注册指的就是信号值加入到进程的未决信号集sigset_t signal（每个信号占用一位）中，并且信号所携带的信息被保留到未决信号信息链的某个sigqueue结构中。只要信号在进程的未决信号集中，表明进程已经知道这些信号的存在，但还没来得及处理，或者该进程被信号阻塞。</p><p>当一个可靠信号发送给一个进程时，不管该信号是否已经在进程中注册，都会被再注册一次，因此，信号不会丢失。这意味着同一个可靠信号可以在同一个进程的未决信号信息链中占有多个sigqueue结构（进程每收到一个可靠信号，都会为它分配一个结构来注册该信号信息，并把该结构添加在未决信号链尾）。</p><p>当一个非可靠信号发送给一个进程时，如果该信号已经在进程中注册（通过sigset_t signal指示），则该信号将被丢弃，造成信号丢失。这意味着同一个非实时信号在进程的未决信号信息链中，至多占有一个sigqueue结构。</p><p>总之信号注册与否，与发送信号的函数（如kill()或sigqueue()等）以及信号安装函数（signal()及sigaction()）无关，只与信号值有关（信号值小于SIGRTMIN的信号最多只注册一次，信号值在SIGRTMIN及SIGRTMAX之间的信号，只要被进程接收到就被注册）。</p><ol start="2"><li>处理信号<br>内核处理一个进程收到的信号的时机是在一个进程从内核态返回用户态时。所以，当一个进程在内核态下运行时，软中断信号并不立即起作用，要等到将返回用户态时才处理。进程只有处理完信号才会返回用户态，进程在用户态下不会有未处理完的信号。<br>内核处理一个进程收到的软中断信号是在该进程的上下文中，因此，进程必须处于运行状态。当进程接收到一个它忽略的信号时，进程丢弃该信号，就像没有收到该信号似的继续运行。<br>如果进程收到一个要捕捉的信号，那么进程从内核态返回用户态时执行用户定义的函数。<strong>而且执行用户定义的函数的方法很巧妙，内核在用户栈上创建一个新的层，该层中将返回地址的值设置成用户定义的处理函数的地址，这样进程从内核返回弹出栈顶时就返回到用户定义的函数处，从函数返回再弹出栈顶时，才返回原先进入内核的地方。</strong>这样做的原因是用户定义的处理函数不能且不允许在内核态下执行（如果用户定义的函数在内核态下运行的话，用户就可以获得任何权限）。<br>对于非可靠信号来说，由于在未决信号信息链中最多只占用一个sigqueue结构，因此该结构被释放后，应该把信号在进程未决信号集中删除（信号注销完毕）；而对于实时信号来说，可能在未决信号信息链中占用多个sigqueue结构，因此应该针对占用sigqueue结构的数目区别对待：如果只占用一个sigqueue结构（进程只收到该信号一次），则执行完相应的处理函数后应该把信号在进程的未决信号集中删除（信号注销完毕）。否则待该信号的所有sigqueue处理完毕后再在进程的未决信号集中删除该信号。<br>当所有未被屏蔽的信号都处理完毕后，即可返回用户空间。对于被屏蔽的信号，当取消屏蔽后，在返回到用户空间时会再次执行上述检查处理的一套流程。</li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://github.com/xuelangZF/CS_Offer/blob/master/Linux_OS/Signal.md" target="_blank" rel="noopener">CS_Offer/Signal.md at master · xuelangZF/CS_Offer · GitHub</a><br><a href="http://lzz5235.github.io/2015/06/04/signal.html" target="_blank" rel="noopener">信号处理的时机</a><br><a href="https://www.waitig.com/%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%85%B3%E4%BA%8Elinux%E7%9A%84%E4%BF%A1%E5%8F%B7%E5%B8%B8%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98.html" target="_blank" rel="noopener">面试中关于Linux的信号常问的问题 | 等英博客</a><br><a href="http://www.cnblogs.com/mickole/p/3189156.html" target="_blank" rel="noopener">linux系统编程之信号（一）：中断与信号 - mickole - 博客园</a><br><a href="https://blog.csdn.net/tennysonsky/article/details/46010303" target="_blank" rel="noopener">Linux系统编程——进程间通信：信号中断处理 - CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是中断&quot;&gt;&lt;a href=&quot;#什么是中断&quot; class=&quot;headerlink&quot; title=&quot;什么是中断&quot;&gt;&lt;/a&gt;什么是中断&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;中断基本概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中断是指计算机在执行期间，系统内发生任何非寻</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.genge.cc/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://blog.genge.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 安装指定版本MySql</title>
    <link href="https://blog.genge.cc/2020/01/23/linux%20%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACMySql/"/>
    <id>https://blog.genge.cc/2020/01/23/linux%20%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACMySql/</id>
    <published>2020-01-23T07:12:39.000Z</published>
    <updated>2020-07-21T13:52:02.554Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作环境、生产环境，我们使用的操作系统为为CentOS6.9，所需mysql版本为5.7，目前CentOS6.x系统默认mysql版本为5.1，这个版本是实在是太旧了。</p><h3 id="彻底卸载系统已经安装的旧版本"><a href="#彻底卸载系统已经安装的旧版本" class="headerlink" title="彻底卸载系统已经安装的旧版本"></a>彻底卸载系统已经安装的旧版本</h3><ul><li><p>检查系统已经安装的mysql<br><code>rpm -qa|grep -i mysql</code></p></li><li><p>删除包<br><code>rpm -ev mysql_lib_xxxx</code></p></li><li><p>删除老版本安装残留文件<br><code>find / -iname mysql*</code> 删除对应目录已经文件</p></li><li><p>删除my.cnf配置文件</p></li></ul><h3 id="使用yum安装MySql5-7"><a href="#使用yum安装MySql5-7" class="headerlink" title="使用yum安装MySql5.7"></a>使用yum安装MySql5.7</h3><ul><li><p>下载mysql5.7源<br><code>wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</code></p></li><li><p>安装源<br><code>yum localinstall mysql-community-release-el6-5.noarch.rpm</code></p></li><li><p>查看可用源中包含哪些版本并开启指定版本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br><span class="line">yum-<span class="built_in">config</span>-manager <span class="comment">--disable mysql56-community</span></span><br><span class="line">yum-<span class="built_in">config</span>-manager <span class="comment">--disable mysql55-community</span></span><br><span class="line">yum-<span class="built_in">config</span>-manager <span class="comment">--enable mysql57-community</span></span><br></pre></td></tr></table></figure></li><li><p>yum安装mysql<br><code>yum install mysql-community-server</code></p></li><li><p>启动mysql<br><code>service mysqld start</code></p></li><li><p>设置开机自动启动</p></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig <span class="comment">--list | grep mysqld</span></span><br><span class="line">chkconfig mysqld <span class="keyword">on</span></span><br></pre></td></tr></table></figure><ul><li>安装设置命令<br><code>mysql_secure_installation</code></li></ul><h3 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h3><p>因为刚才启动的时候是系统默认配置的临时密码<br>使用如下命令可以查看，并且修改：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo grep <span class="string">'temporary password'</span> /var/log/mysqld.log</span><br><span class="line">mysql -u root -p </span><br><span class="line">ALTER<span class="built_in"> USER </span><span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'newPassword'</span>;</span><br></pre></td></tr></table></figure><h3 id="设置允许连接数据库"><a href="#设置允许连接数据库" class="headerlink" title="设置允许连接数据库"></a>设置允许连接数据库</h3><p>命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">"%"</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'passwordith grant option;  </span></span><br><span class="line"><span class="string">flush privileges;</span></span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul><li>比较奇怪，域名解析错误<br>在yum install 的时候，发现大量的[Errno 14] PYCURL ERROR 6 - “Couldn’t resolve host ‘mirrors.aliyun.com’”错误，开始以为自己源设置错误，后来才知道，机器卡死过一次，导致系统莫名其妙的错误，了解网络的很快就知道需要设置系统的DNS<br>在<code>/etc/resolv.conf</code>文件中加入如下内容：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"> nameserver <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure>之前是啥也没有的，都是些没用的注释解释信息</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于工作环境、生产环境，我们使用的操作系统为为CentOS6.9，所需mysql版本为5.7，目前CentOS6.x系统默认mysql版本为5.1，这个版本是实在是太旧了。&lt;/p&gt;
&lt;h3 id=&quot;彻底卸载系统已经安装的旧版本&quot;&gt;&lt;a href=&quot;#彻底卸载系统已经安装的旧</summary>
      
    
    
    
    <category term="Mysql" scheme="https://blog.genge.cc/categories/Mysql/"/>
    
    
    <category term="linux" scheme="https://blog.genge.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>TCP 三次握手和四次挥手</title>
    <link href="https://blog.genge.cc/2020/01/23/TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>https://blog.genge.cc/2020/01/23/TCP%20%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2020-01-23T00:12:45.000Z</published>
    <updated>2020-07-15T14:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先需要了解的知识"><a href="#首先需要了解的知识" class="headerlink" title="首先需要了解的知识"></a>首先需要了解的知识</h3><ul><li>TCP的包是没有IP地址的，那是IP层上的事。但是有源端口和目标端口。</li><li>一个TCP连接需要四个元组来表示是同一个连接（src_ip, src_port, dst_ip, dst_port）准确说是五元组，还有一个是协议。但因为这里只是说TCP协议，所以，这里我只说四元组。</li><li>注意上图中的四个非常重要的东西：<ul><li>Sequence Number是包的序号，用来解决网络包乱序（reordering）问题。（seq）</li><li>Acknowledgement Number就是ACK——用于确认收到，用来解决不丢包的问题。</li><li>Window又叫Advertised-Window，也就是著名的滑动窗口（Sliding Window），用于解决流控的。</li><li>TCP Flag ，也就是包的类型，主要是用于操控TCP的状态机的。主要有SYN、FIN、ACK等</li></ul></li></ul><h3 id="TCP的状态机"><a href="#TCP的状态机" class="headerlink" title="TCP的状态机"></a>TCP的状态机</h3><p>其实，网络上的传输是没有连接的，包括TCP也是一样的。而TCP所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP的状态变换是非常重要的。<br>如图：(用excel画图的难受，又早不到其他好工具，能推荐个吗？)<br><img src="http://genge.cc/wp-content/uploads/2018/09/tcp%E8%BF%9E%E6%8E%A5.png" alt="TCP连接、通讯、断开流程图"><br>图中Client 、Server并不是严格区分的，TCP是全双工的，双方都可以充当Server、Client</p><ol><li><p>三次握手</p><ol><li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li><li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li><li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。<br>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</li></ol></li><li><p>四次挥手<br>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p><ol><li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1(client)没有数据要发送给主机2(server)了</li><li>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；</li><li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</li><li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</li></ol></li></ol><p>至此，TCP的四次分手就这么愉快的完成了。当你看到这里，你的脑子里会有很多的疑问，很多的不懂，感觉很凌乱；没事，我们继续总结。</p><ol start="3"><li>三次握手和四次挥手意义<br>对于建链接的3次握手，主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）——所以叫SYN，全称Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP会用这个序号来拼接数据）。<br>对于四次挥手，其实仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。</li></ol><p><strong>为什么要三次握手</strong></p><blockquote><p>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。</p></blockquote><p>在谢希仁著《计算机网络》书中同时举了一个例子，如下：</p><blockquote><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”<br><img src="http://genge.cc/wp-content/uploads/2018/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" alt="计算机网络三次握手"></p></blockquote><p>一句话总结就是：<strong>防止了服务器端的一直等待而浪费资源。</strong></p><p><strong>为什么要四次挥手</strong><br>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p><p>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSED状态？<br>虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSED状态了，但是我们必须假象网络是不可靠的，有可能最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</p><h3 id="状态机状态解释"><a href="#状态机状态解释" class="headerlink" title="状态机状态解释"></a>状态机状态解释</h3><ul><li>CLOSED: 这个没什么好说的了，表示初始状态，也是最后状态。</li><li>LISTEN: 这个也是非常容易理解的一个状态，表示服务器端的某个SOCKET处于监听状态，可以接受连接了。</li><li>SYN_RCVD: 这个状态表示接受到了SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat你是很难看到这种状态的，除非你特意写了一个客户端测试程序，故意将三次TCP握手过程中最后一个ACK报文不予发送。因此这种状态时，当收到客户端的ACK报文后，它会进入到ESTABLISHED状态。</li><li>SYN_SENT: 这个状态与SYN_RCVD遥想呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，因此也随即它会进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT状态表示客户端已发送SYN报文。</li><li>ESTABLISHED：这个容易理解了，表示连接已经建立了。</li><li>FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。</li><li>FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。</li><li>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</li><li>CLOSING: 这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。正常情况下，当你发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？其实细想一下，也不难得出结论：那就是如果双方几乎在同时close一个SOCKET的话，那么就出现了双方同时发送FIN报文的情况，也即会出现CLOSING状态，表示双方都正在关闭SOCKET连接。</li><li>CLOSE_WAIT: 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。</li><li>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">TCP 的那些事儿（上） | | 酷 壳 - CoolShell</a><br><a href="https://github.com/jawil/blog/issues/14" target="_blank" rel="noopener">通俗大白话来理解TCP协议的三次握手和四次分手 · Issue #14 · jawil/blog · GitHub</a><br><a href="https://blog.csdn.net/zxygww/article/details/45009613" target="_blank" rel="noopener">面试常考题-TCP三次握手与四次握手 - CSDN博客</a><br><a href="https://blog.csdn.net/whuslei/article/details/6667471" target="_blank" rel="noopener">TCP协议中的三次握手和四次挥手(图解) - CSDN博客</a><br><a href="http://www.cnblogs.com/MyLove-Summer/p/5215287.html" target="_blank" rel="noopener">Linux Socket 网络编程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;首先需要了解的知识&quot;&gt;&lt;a href=&quot;#首先需要了解的知识&quot; class=&quot;headerlink&quot; title=&quot;首先需要了解的知识&quot;&gt;&lt;/a&gt;首先需要了解的知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;TCP的包是没有IP地址的，那是IP层上的事。但是有源端口和目标端口。&lt;</summary>
      
    
    
    
    <category term="网络" scheme="https://blog.genge.cc/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="https://blog.genge.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网易互娱面试总结</title>
    <link href="https://blog.genge.cc/2020/01/23/%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.genge.cc/2020/01/23/%E7%BD%91%E6%98%93%E4%BA%92%E5%A8%B1%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-23T00:12:45.000Z</published>
    <updated>2020-07-21T13:52:02.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现场二面技术总监面试"><a href="#现场二面技术总监面试" class="headerlink" title="现场二面技术总监面试"></a>现场二面技术总监面试</h2><p>这个人看起来挺和善的，实际上还是有一套的，让你写代码，然后眼睛编译给你指出错误，然后修改，然后他就去玩手机了…</p><ol><li>linux env multi-thread gdb debug 多线程调试 (回答对一半)<br> 首先介绍下基本命令<ul><li><code>info threads</code> 显示当前可以调试的所有线程，gdb会为每一个线程分配一个唯一ID，利用这个唯一Id可以切换到这个线程上下文环境中，并且前面有<code>*</code>标识的是当前调试的线程<br>  <img src="http:%5Cgenge.cc%5Cwp-content%5Cuploads%5C2018%5C09%5Ccfd3fadfb7b7fd387f68feb079e1a99a.png" alt=""></li><li><code>thread ID</code> 切换调试的线程为指定ID的线程。这个Id是gdb为每个线程分配的，并不是操作系统分配的PID，可以通过<code>info threads</code>命令查看</li><li><code>break xx.cpp:123 thread all</code> 在所有线程中相应的行上设置断点</li><li><code>break apply ID1 ID2 cmd</code> 让一个或者多个线程执行gdb命令cmd</li><li><code>break apply all cmd</code> 让所有被调试线程执行GDB命令command</li><li><code>set print thread-events</code> <strong>设置线程创建提醒</strong>  当运行过程总产生新线程的时候会打印</li><li><code>set scheduler-locking off|on|step</code> 这个是重点，经常被问到，在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。<ul><li>off 不锁定任何线程，也就是所有线程都执行，这是默认值。</li><li>on 只有当前被调试程序会执行。.</li><li>step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。该模式是对single-stepping模式的优化。此模式会阻止其他线程在当前线程单步调试时，抢占当前线。因此调试的焦点不会被以外的改变。其他线程不可能抢占当前的调试线程。其他线程只有下列情况下会重新获得运行的机会：当你‘next’一个函数调用的时候。当你使用诸如‘continue’、‘until‘、’finish‘命令的时候。其他线程遇到设置好的断点的时候。</li></ul></li></ul></li></ol><ul><li>调试C++或者C的宏<br>  在编译程序的时候，加上<code>-ggdb3</code>参数，这样就可以调试宏<ul><li><code>info macro –</code> 你可以查看这个宏在哪些文件里被引用了，以及宏定义是什么样的。</li><li><code>macro –</code>你可以查看宏展开的样子。</li></ul></li><li>关联源文件<ul><li>如果在编译情况下加上<code>-g</code>参数，那么就可以包含debug信息，否者gdb找不到符号表</li><li>可以使用<code>directory</code>命令来设置源文件的目录<br>  <img src="http:%5Cgenge.cc%5Cwp-content%5Cuploads%5C2018%5C09%5C942cbce8346b6e1ef65a32ea8c1919a9.png" alt=""></li></ul></li><li>条件断点<br>  基本语法<code>break  [where] if [condition]</code> 尤其是在一个循环或递归中，或是要监视某个变量。注意，这个设置是在GDB中的，只不过每经过那个断点时GDB会帮你检查一下条件是否满足。</li><li>添加参数<ol><li>gdb命令行的 –args 参数</li><li>gdb环境中 set args命令。</li></ol></li><li>设置变量<ol><li>可以直接使用set命令 设置上下文环境变量值，可以模拟一些很难在测试中出现的情况，以防未来程序出错</li><li>声明变量，然后使用，语法为<code>$name = 1</code></li></ol></li><li>X命令<br>  平时我们一般使用p命令打印参数值，但是这个命令必须指定变量名，不知道变量名的时候，我们可以使用X命令<ol><li>x\x 以十六进制输出</li><li>x\d 以十进制输出</li><li>x\c 以单字符输出</li><li>x\i  反汇编 – 通常，我们会使用 x\10i $ip-20 来查看当前的汇编（$ip是指令寄存器）</li><li>x\s 以字符串输出</li></ol></li><li>command命令  把一组命令录制下来打包成‘宏’<br>  <img src="http:%5Cgenge.cc%5Cwp-content%5Cuploads%5C2018%5C09%5C1bc671b5484282a324ff2d3b68863cb7.png" alt=""></li></ul><ol start="2"><li><p>循环队列判空 (OK)<br> 有三种方式处理这种问题</p><ol><li>队列Queue结构中保存一个计数器count表示当前队列元素个数（最简单粗暴），但count等于队列cap的时候就队列满，count为0的时候队列空</li><li><strong>少用一个元素空间</strong>，约定以“队列头指针front在队尾指针rear的下一个位置上”作为队列“满”状态的标志。这种方法比较常用，但是面试官不让用…. front指向队首元素，rear指向队尾元素的下一个元素。即：<ul><li>队空时： front=rear</li><li>队满时： (rear+1)%maxsize=front</li></ul></li><li>还有一个比较取巧的办法，优化第一种方案：使用一个状态flag变量，初始值为0，但入队成功置flag = 1，当出队成功设置flag = 0。我们可以使用 <code>front == rear &amp;&amp; flag</code> 表示队列满（在入队操作之后导致front=rear），可以使用<code>front == rear &amp;&amp; ！flag</code>表示队列空（出队后导致f==r，显然是队列空）</li></ol></li><li><p>单向队列反转 (OK) 很简单</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node * next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">reverse_list</span><span class="params">(Node* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    Node* node = <span class="literal">nullptr</span>;</span><br><span class="line">    node = head;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    node = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Node* next = head-&gt;next;</span><br><span class="line">        head-&gt;next = node;</span><br><span class="line">        node = head;</span><br><span class="line">        head = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="现场面一面回忆总结"><a href="#现场面一面回忆总结" class="headerlink" title="现场面一面回忆总结"></a>现场面一面回忆总结</h2><p>估计是小组长之类的面试官吧，去之前我还特意看下自己的衣装是否整洁，这个面试官感觉是从<code>工地</code>上回来的，衣服上很脏，典型程序员面孔，他问的问题算是比较全面<br>操作系统（linux）、数据库（mysql）、算法、数据结构、计算机网络基础、网络编程、语言基础（C++语言）、并发、以及具体业务设计，还有项目基本介绍，游戏服务器架构简单介绍</p><p>常见模块实现</p><ol><li><p>定时器实现方式目前应用比较多的有时间轮和最小堆方式 ， 优缺点其实就是算法复杂度：<br> 实现方式    StartTimer    StopTimer    PerTickBookkeeping<br> 基于链表         O(1)        O(n)        O(n)<br> 基于排序链表    O(n)        O(1)        O(1)<br> 基于最小堆        O(lgn)        O(1)        O(1)<br> 基于时间轮        O(1)        O(1)        O(1)<br>https:\<a href="http://www.ibm.com\developerworks\cn\linux\l-cn-timers\" target="_blank" rel="noopener">www.ibm.com\developerworks\cn\linux\l-cn-timers\</a></p></li><li><p>斐波那契数 多种实现</p><ol><li>递归 最简单 粗暴  效率最低  存在大量重复计算</li><li>循环叠加  算法复杂度为O（n）</li><li>申请额外数组保存结果 去除重复计算 空间换时间</li><li>利用数学公式推导，矩阵相乘推导公式，算法复杂度为O（logn）  效率最高<br>{f(n), f(n-1), f(n-1), f(n-2)} ={1, 1, 1,0}n-1<br>{f(n), f(n-1), f(n-1), f(n-2)}<br>详情见 https:\<a href="http://www.cnblogs.com\python27\archive\2011\11\25\2261980.html" target="_blank" rel="noopener">www.cnblogs.com\python27\archive\2011\11\25\2261980.html</a></li><li>通项公式  这个实在是牛逼  一个公式搞定…   不是数学系  这些方法确实想不出 只能记忆<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> tmp=<span class="built_in">sqrt</span>(<span class="keyword">double</span>(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>((<span class="built_in">pow</span>((<span class="number">1</span>+tmp)\<span class="number">2</span>,n)-<span class="built_in">pow</span>((<span class="number">1</span>-tmp)\<span class="number">2</span>,n))\tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>定理<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)<span class="keyword">return</span> <span class="number">1</span>;    \\当n&gt;=<span class="number">3</span>时，n&gt;n\<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">int</span> x=Fibonacci(n\<span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> y=Fibonacci(n\<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)<span class="keyword">return</span> x*x+y*y;</span><br><span class="line"><span class="keyword">return</span> x*(<span class="number">2</span>*y-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>敏感字过滤算法</p><ol><li>正则匹配  面试官一般不会让你用这个 因为要匹配的内容太多  写正则表达式就很烦…  效率还不高  KMP算法 太慢 不能用</li><li>自己当时想到的一张方法为字典树TrieTree  这个方法太耗空间 时间复杂度为O(key_max_len) 很多生产环境确实是用这个实现的，别名有限状态机 DFA：DFA即Deterministic Finite Automaton，也就是确定有穷自动机</li><li>其他什么优化算法 其实也不用</li></ol></li><li><p>数据库</p><ol><li><p>数据库事务特性<br>  ACID  原子性  一致性  隔离性  持久性dura</p></li><li><p>事务隔离级别 </p><pre><code>隔离级别               脏读（Dirty Read）          不可重复读（NonRepeatable Read）     幻读（Phantom Read） </code></pre><p>  未提交读（Read uncommitted）        可能                            可能                       可能</p><p>  已提交读（Read committed）          不可能                          可能                       可能</p><p>  可重复读（Repeatable read）         不可能                          不可能                     可能</p><p>  可串行化（Serializable ）           不可能                          不可能                     不可能</p><p>  ·未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据（事务之间关系）<br>  ·提交读(Read Committed)：只能读取到已经提交的数据。<strong>Oracle等多数数据库默认都是该级别</strong> (不重复读) （事务之间关系）<br>  ·可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，<strong>InnoDB默认级别</strong>。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读 （事务内部）<br>  ·串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞<br>  可重复读和提交读是矛盾的。在同一个事务里，如果保证了可重复读，就会看不到其他事务的提交，违背了提交读；如果保证了提交读，就会导致前后两次读到的结果不一致，违背了可重复读。<br>  可以这么讲，InnoDB提供了这样的机制，在默认的可重复读的隔离级别里，可以使用加锁读去查询最新的数据（提交读）。<br>  MySQL InnoDB的可重复读并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是next-key locks。<br>  总结:<a href="http:\www.cnblogs.com\zhoujinyi\p\3437475.html">MySQL 四种事务隔离级的说明 - jyzhou - 博客园</a><br>  四个级别逐渐增强，每个级别解决一个问题。事务级别越高,性能越差,大多数环境read committed 可以用.记住4个隔离级别的特点(上面的例子);<a href="http:\\www.cnblogs.com\zhoujinyi\p\3437475.html" target="_blank" rel="noopener">http:\\www.cnblogs.com\zhoujinyi\p\3437475.html</a></p></li><li><p>事务实现原理<br>https:\draveness.me\mysql-transaction 介绍事务ACID的火滚日志实现 https:\<a href="http://www.cnblogs.com\wy123\p\8365234.html" target="_blank" rel="noopener">www.cnblogs.com\wy123\p\8365234.html</a> 具体日志格式</p></li><li><p>innodb和myisam存储引擎的区别 https:\blog.csdn.net\xifeijian\article\details\20316775</p><ul><li>MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持，MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</li><li>InnoDB不支持FULLTEXT类型的索引。</li><li>InnoDB 中不保存表的具体行数，也就是说，执行select count(<em>) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(</em>)语句包含 where条件时，两种表的操作是一样的。</li><li>对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</li><li>细节可以看链接 https:\blog.csdn.net\xifeijian\article\details\20316775和下面一个介绍</li><li>https:\<a href="http://www.jianshu.com\p\a957b18ba40d" target="_blank" rel="noopener">www.jianshu.com\p\a957b18ba40d</a> </li></ul></li><li><p>对于like查询啥时候会用到索引 http:\thephper.com?p=142</p><blockquote><p> like 不能用索引？ 这个确实不知道 难受<br>尽量减少like，但不是绝对不可用，”xxxx%” 是可以用到索引的，<br>想象一下，你在看一本成语词典，目录是按成语拼音顺序建立，查询需求是，你想找以 “一”字开头的成语（”一%“），和你想找包含一字的成语（“%一%”）<br>除了like，以下操作符也可用到索引：<br>&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN<br>&lt;&gt;，not in ，！=则不行</p></blockquote></li><li><p>索引类型<br>https:\segmentfault.com\q\1010000003832312           http:\blog.codinglabs.org\articles\theory-of-mysql-index.html</p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;现场二面技术总监面试&quot;&gt;&lt;a href=&quot;#现场二面技术总监面试&quot; class=&quot;headerlink&quot; title=&quot;现场二面技术总监面试&quot;&gt;&lt;/a&gt;现场二面技术总监面试&lt;/h2&gt;&lt;p&gt;这个人看起来挺和善的，实际上还是有一套的，让你写代码，然后眼睛编译给你指出错</summary>
      
    
    
    
    
    <category term="面试" scheme="https://blog.genge.cc/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>linux 内核RingBuffer实现</title>
    <link href="https://blog.genge.cc/2020/01/22/linux%20%E5%86%85%E6%A0%B8RingBuffer%E5%AE%9E%E7%8E%B0/"/>
    <id>https://blog.genge.cc/2020/01/22/linux%20%E5%86%85%E6%A0%B8RingBuffer%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-01-22T07:12:45.000Z</published>
    <updated>2020-07-21T13:52:02.554Z</updated>
    
    <content type="html"><![CDATA[<p>实现方式非常巧妙，刚开始看的有点奇怪，当发现实现原理后惊讶了一番..</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**@brief 仿照linux kfifo写的ring buffer</span></span><br><span class="line"><span class="comment">* ring_buffer.h</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> KFIFO_HEADER_H </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KFIFO_HEADER_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断x是否是2的次方</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> is_power_of_2(x) ((x) != 0 &amp;&amp; (((x) &amp; ((x) - 1)) == 0))</span></span><br><span class="line"><span class="comment">//取a和b中最小值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) (((a) &lt; (b)) ? (a) : (b))</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ring_buffer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span>         *<span class="built_in">buffer</span>;     <span class="comment">//缓冲区</span></span><br><span class="line">    <span class="keyword">uint32_t</span>     <span class="built_in">size</span>;       <span class="comment">//大小</span></span><br><span class="line">    <span class="keyword">uint32_t</span>     in;         <span class="comment">//入口位置</span></span><br><span class="line">    <span class="keyword">uint32_t</span>       out;        <span class="comment">//出口位置</span></span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> *f_lock;    <span class="comment">//互斥锁</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化缓冲区</span></span><br><span class="line"><span class="function">struct ring_buffer* <span class="title">ring_buffer_init</span><span class="params">(<span class="keyword">void</span> *<span class="built_in">buffer</span>, <span class="keyword">uint32_t</span> <span class="built_in">size</span>, <span class="keyword">pthread_mutex_t</span> *f_lock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(<span class="built_in">buffer</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ring_buffer</span> *<span class="title">ring_buf</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (!is_power_of_2(<span class="built_in">size</span>))</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"size must be power of 2.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ring_buf;</span><br><span class="line">    &#125;</span><br><span class="line">    ring_buf = (struct ring_buffer *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ring_buffer));</span><br><span class="line">    <span class="keyword">if</span> (!ring_buf)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Failed to malloc memory,errno:%u,reason:%s"</span>,</span><br><span class="line">            errno, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> ring_buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(ring_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct ring_buffer));</span><br><span class="line">    ring_buf-&gt;<span class="built_in">buffer</span> = <span class="built_in">buffer</span>;</span><br><span class="line">    ring_buf-&gt;<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">    ring_buf-&gt;in = <span class="number">0</span>;</span><br><span class="line">    ring_buf-&gt;out = <span class="number">0</span>;</span><br><span class="line">        ring_buf-&gt;f_lock = f_lock;</span><br><span class="line">    <span class="keyword">return</span> ring_buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ring_buffer_free</span><span class="params">(struct ring_buffer *ring_buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ring_buf)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (ring_buf-&gt;<span class="built_in">buffer</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(ring_buf-&gt;<span class="built_in">buffer</span>);</span><br><span class="line">        ring_buf-&gt;<span class="built_in">buffer</span> = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(ring_buf);</span><br><span class="line">    ring_buf = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//缓冲区的长度</span></span><br><span class="line"><span class="keyword">uint32_t</span> __ring_buffer_len(<span class="keyword">const</span> struct ring_buffer *ring_buf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (ring_buf-&gt;in - ring_buf-&gt;out);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从缓冲区中取数据</span></span><br><span class="line"><span class="keyword">uint32_t</span> __ring_buffer_get(struct ring_buffer *ring_buf, <span class="keyword">void</span> * <span class="built_in">buffer</span>, <span class="keyword">uint32_t</span> <span class="built_in">size</span>)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ring_buf || <span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">size</span>  = <span class="built_in">min</span>(<span class="built_in">size</span>, ring_buf-&gt;in - ring_buf-&gt;out);        </span><br><span class="line">    <span class="comment">/* first get the data from fifo-&gt;out until the end of the buffer */</span></span><br><span class="line">    len = <span class="built_in">min</span>(<span class="built_in">size</span>, ring_buf-&gt;<span class="built_in">size</span> - (ring_buf-&gt;out &amp; (ring_buf-&gt;<span class="built_in">size</span> - <span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="built_in">buffer</span>, ring_buf-&gt;<span class="built_in">buffer</span> + (ring_buf-&gt;out &amp; (ring_buf-&gt;<span class="built_in">size</span> - <span class="number">1</span>)), len);</span><br><span class="line">    <span class="comment">/* then get the rest (if any) from the beginning of the buffer */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(<span class="built_in">buffer</span> + len, ring_buf-&gt;<span class="built_in">buffer</span>, <span class="built_in">size</span> - len);</span><br><span class="line">    ring_buf-&gt;out += <span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向缓冲区中存放数据</span></span><br><span class="line"><span class="keyword">uint32_t</span> __ring_buffer_put(struct ring_buffer *ring_buf, <span class="keyword">void</span> *<span class="built_in">buffer</span>, <span class="keyword">uint32_t</span> <span class="built_in">size</span>)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ring_buf || <span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">size</span> = <span class="built_in">min</span>(<span class="built_in">size</span>, ring_buf-&gt;<span class="built_in">size</span> - ring_buf-&gt;in + ring_buf-&gt;out);</span><br><span class="line">    <span class="comment">/* first put the data starting from fifo-&gt;in to buffer end */</span></span><br><span class="line">    len  = <span class="built_in">min</span>(<span class="built_in">size</span>, ring_buf-&gt;<span class="built_in">size</span> - (ring_buf-&gt;in &amp; (ring_buf-&gt;<span class="built_in">size</span> - <span class="number">1</span>)));</span><br><span class="line">    <span class="built_in">memcpy</span>(ring_buf-&gt;<span class="built_in">buffer</span> + (ring_buf-&gt;in &amp; (ring_buf-&gt;<span class="built_in">size</span> - <span class="number">1</span>)), <span class="built_in">buffer</span>, len);</span><br><span class="line">    <span class="comment">/* then put the rest (if any) at the beginning of the buffer */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(ring_buf-&gt;<span class="built_in">buffer</span>, <span class="built_in">buffer</span> + len, <span class="built_in">size</span> - len);</span><br><span class="line">    ring_buf-&gt;in += <span class="built_in">size</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">ring_buffer_len</span><span class="params">(<span class="keyword">const</span> struct ring_buffer *ring_buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> len = <span class="number">0</span>;</span><br><span class="line">    pthread_mutex_lock(ring_buf-&gt;f_lock);</span><br><span class="line">    len = __ring_buffer_len(ring_buf);</span><br><span class="line">    pthread_mutex_unlock(ring_buf-&gt;f_lock);</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">ring_buffer_get</span><span class="params">(struct ring_buffer *ring_buf, <span class="keyword">void</span> *<span class="built_in">buffer</span>, <span class="keyword">uint32_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> ret;</span><br><span class="line">    pthread_mutex_lock(ring_buf-&gt;f_lock);</span><br><span class="line">    ret = __ring_buffer_get(ring_buf, <span class="built_in">buffer</span>, <span class="built_in">size</span>);</span><br><span class="line">    <span class="comment">//buffer中没有数据</span></span><br><span class="line">    <span class="keyword">if</span> (ring_buf-&gt;in == ring_buf-&gt;out)</span><br><span class="line">    ring_buf-&gt;in = ring_buf-&gt;out = <span class="number">0</span>;</span><br><span class="line">    pthread_mutex_unlock(ring_buf-&gt;f_lock);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">ring_buffer_put</span><span class="params">(struct ring_buffer *ring_buf, <span class="keyword">void</span> *<span class="built_in">buffer</span>, <span class="keyword">uint32_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> ret;</span><br><span class="line">    pthread_mutex_lock(ring_buf-&gt;f_lock);</span><br><span class="line">    ret = __ring_buffer_put(ring_buf, <span class="built_in">buffer</span>, <span class="built_in">size</span>);</span><br><span class="line">    pthread_mutex_unlock(ring_buf-&gt;f_lock);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>使用栗子，采用多线程模拟生产者和消费者编写测试程序，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**@brief ring buffer测试程序，创建两个线程，一个生产者，一个消费者。</span></span><br><span class="line"><span class="comment"> * 生产者每隔1秒向buffer中投入数据，消费者每隔2秒去取数据。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ring_buffer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE  1024 * 1024</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student_info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> stu_id;</span><br><span class="line">    <span class="keyword">uint32_t</span> age;</span><br><span class="line">    <span class="keyword">uint32_t</span> score;</span><br><span class="line">&#125;student_info;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_student_info</span><span class="params">(<span class="keyword">const</span> student_info *stu_info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(stu_info);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"id:%lu\t"</span>,stu_info-&gt;stu_id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"age:%u\t"</span>,stu_info-&gt;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"score:%u\n"</span>,stu_info-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">student_info * <span class="title">get_student_info</span><span class="params">(<span class="keyword">time_t</span> timer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    student_info *stu_info = (student_info *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(student_info));</span><br><span class="line">    <span class="keyword">if</span> (!stu_info)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to malloc memory.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    srand(timer);</span><br><span class="line">    stu_info-&gt;stu_id = <span class="number">10000</span> + rand() % <span class="number">9999</span>;</span><br><span class="line">    stu_info-&gt;age = rand() % <span class="number">30</span>;</span><br><span class="line">    stu_info-&gt;score = rand() % <span class="number">101</span>;</span><br><span class="line">    print_student_info(stu_info);</span><br><span class="line">    <span class="keyword">return</span> stu_info;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">consumer_proc</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ring_buffer</span> *<span class="title">ring_buf</span> = (<span class="title">struct</span> <span class="title">ring_buffer</span> *)<span class="title">arg</span>;</span></span><br><span class="line">    student_info stu_info; </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"------------------------------------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"get a student info from ring buffer.\n"</span>);</span><br><span class="line">    ring_buffer_get(ring_buf, (<span class="keyword">void</span> *)&amp;stu_info, <span class="keyword">sizeof</span>(student_info));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ring buffer length: %u\n"</span>, ring_buffer_len(ring_buf));</span><br><span class="line">    print_student_info(&amp;stu_info);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"------------------------------------------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)ring_buf;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">producer_proc</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> cur_time;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ring_buffer</span> *<span class="title">ring_buf</span> = (<span class="title">struct</span> <span class="title">ring_buffer</span> *)<span class="title">arg</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    time(&amp;cur_time);</span><br><span class="line">    srand(cur_time);</span><br><span class="line">    <span class="keyword">int</span> seed = rand() % <span class="number">11111</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"******************************************\n"</span>);</span><br><span class="line">    student_info *stu_info = get_student_info(cur_time + seed);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"put a student info to ring buffer.\n"</span>);</span><br><span class="line">    ring_buffer_put(ring_buf, (<span class="keyword">void</span> *)stu_info, <span class="keyword">sizeof</span>(student_info));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ring buffer length: %u\n"</span>, ring_buffer_len(ring_buf));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"******************************************\n"</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)ring_buf;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">consumer_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    err = pthread_create(&amp;tid, <span class="literal">NULL</span>, consumer_proc, arg);</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to create consumer thread.errno:%u, reason:%s\n"</span>,</span><br><span class="line">        errno, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">producer_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    err = pthread_create(&amp;tid, <span class="literal">NULL</span>, producer_proc, arg);</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to create consumer thread.errno:%u, reason:%s\n"</span>,</span><br><span class="line">        errno, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> * <span class="built_in">buffer</span> = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ring_buffer</span> *<span class="title">ring_buf</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="keyword">pthread_t</span> consume_pid, produce_pid;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> *f_lock = (<span class="keyword">pthread_mutex_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">pthread_mutex_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (pthread_mutex_init(f_lock, <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed init mutex,errno:%u,reason:%s\n"</span>,</span><br><span class="line">        errno, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">buffer</span> = (<span class="keyword">void</span> *)<span class="built_in">malloc</span>(BUFFER_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">buffer</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to malloc memory.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">size</span> = BUFFER_SIZE;</span><br><span class="line">    ring_buf = ring_buffer_init(<span class="built_in">buffer</span>, <span class="built_in">size</span>, f_lock);</span><br><span class="line">    <span class="keyword">if</span> (!ring_buf)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to init ring buffer.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    student_info *stu_info = get_student_info(<span class="number">638946124</span>);</span><br><span class="line">    ring_buffer_put(ring_buf, (<span class="keyword">void</span> *)stu_info, <span class="keyword">sizeof</span>(student_info));</span><br><span class="line">    stu_info = get_student_info(<span class="number">976686464</span>);</span><br><span class="line">    ring_buffer_put(ring_buf, (<span class="keyword">void</span> *)stu_info, <span class="keyword">sizeof</span>(student_info));</span><br><span class="line">    ring_buffer_get(ring_buf, (<span class="keyword">void</span> *)stu_info, <span class="keyword">sizeof</span>(student_info));</span><br><span class="line">    print_student_info(stu_info);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"multi thread test.......\n"</span>);</span><br><span class="line">    produce_pid  = producer_thread((<span class="keyword">void</span>*)ring_buf);</span><br><span class="line">    consume_pid  = consumer_thread((<span class="keyword">void</span>*)ring_buf);</span><br><span class="line">    pthread_join(produce_pid, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(consume_pid, <span class="literal">NULL</span>);</span><br><span class="line">    ring_buffer_free(ring_buf);</span><br><span class="line">    <span class="built_in">free</span>(f_lock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/Anker/p/3481373.html" target="_blank" rel="noopener">linux内核数据结构之kfifo - Daleshi的技术随笔 - 博客园</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实现方式非常巧妙，刚开始看的有点奇怪，当发现实现原理后惊讶了一番..&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="C/C++" scheme="https://blog.genge.cc/categories/C-C/"/>
    
    
    <category term="linux" scheme="https://blog.genge.cc/tags/linux/"/>
    
  </entry>
  
</feed>
